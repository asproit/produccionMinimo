[
    {
        "id": "ef484dfe62883e41",
        "type": "tab",
        "label": "TC-RE-01",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "237db71295252168",
        "type": "tab",
        "label": "TC-RE-04",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1eb03b4f8f90f9d8",
        "type": "tab",
        "label": "TC-RE-05",
        "disabled": false,
        "info": "ADC para tempertura de intercambiadores\r\nSIO-MB08THMS\r\nTemperature Input Module: thermocouple, 8-channel in",
        "env": []
    },
    {
        "id": "a0c3bb5123a98cbc",
        "type": "tab",
        "label": "TC-RE-06",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e2b9859944ef07b2",
        "type": "tab",
        "label": "TABLA",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "feca9c5ced6ec599",
        "type": "mqtt-broker",
        "name": "mqtt_tb_MP-1.1",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "74ceda570d3e66dc",
        "type": "mqtt-broker",
        "name": "mqtt_tb_MF-3.1",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "75c0821a42a5cdfb",
        "type": "mqtt-broker",
        "name": "mqtt_tb_MN-2.1",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "689c5e6207baccbb",
        "type": "mqtt-broker",
        "name": "mqtt_tb_MF-1.1",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "7d040f0f19d79e89",
        "type": "mqtt-broker",
        "name": "mqtt_tbb_ST-3.4",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "b2eea5177ada0477",
        "type": "mqtt-broker",
        "name": "mtt_tb_ST-3.3",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "a32defc5189db4ea",
        "type": "mqtt-broker",
        "name": "mqtt_tb_ST-3.2",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "9c9e2630ed80f90e",
        "type": "mqtt-broker",
        "name": "mqtt_tb_ST-3.1",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "2772d50815d076a4",
        "type": "mqtt-broker",
        "name": "mqtt_tb_MF-1.2",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "233cd5171dde3839",
        "type": "mqtt-broker",
        "name": "mqtt_tb_ST-2.1",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "3b8eefdff633489b",
        "type": "mqtt-broker",
        "name": "mqtt_tb_ST-2.2",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "mqtt_broker_1",
        "type": "mqtt-broker",
        "name": "Broker MQTT USR-W610",
        "broker": "192.168.1.44",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "586ef25fd8e81fa5",
        "type": "mqtt-broker",
        "name": "MN-4",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "b4cdb9cd5246ed2e",
        "type": "mqtt-broker",
        "name": "MN-06A",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "4aabcdd5a91592fb",
        "type": "mqtt-broker",
        "name": "MN-6B",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "c1c71d2192e51407",
        "type": "mqtt-broker",
        "name": "MN-7",
        "broker": "",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "7ac8f4b3a29c864f",
        "type": "mqtt-broker",
        "name": "MN-1",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "bb61bb0c49cb82b4",
        "type": "mqtt-broker",
        "name": "MN-9",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "aeb8c7546d28ce5c",
        "type": "mqtt-broker",
        "name": "MN-7",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "4a694e78af934234",
        "type": "modbus-client",
        "name": "PLC_1",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.0.7",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 100,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "ba775fe896e243b7",
        "type": "modbus-client",
        "name": "DVP-04TC_serial",
        "clienttype": "serial",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": true,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.202",
        "tcpPort": "502",
        "tcpType": "C701",
        "serialPort": "/dev/ttyUSB0",
        "serialType": "ASCII",
        "serialBaudrate": "9600",
        "serialDatabits": "7",
        "serialStopbits": "1",
        "serialParity": "even",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showErrors": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "f1b3a3acb886c48c",
        "type": "modbus-client",
        "name": "ADC_2",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.254",
        "tcpPort": "502",
        "tcpType": "TCP-RTU-BUFFERED",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "3ab988e0e462aed7",
        "type": "modbus-client",
        "name": "ADC3",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.215",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB0",
        "serialType": "RTU",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "200",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 5000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "60e5d9130b1268c8",
        "type": "modbus-client",
        "name": "ADC-TC-01",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.209",
        "tcpPort": "502",
        "tcpType": "TCP-RTU-BUFFERED",
        "serialPort": "/dev/ttyUSB1",
        "serialType": "RTU",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "52f2d0e38d313f88",
        "type": "modbus-client",
        "name": "EDP1",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "127.0.0.1",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "5587ad8696be252e",
        "type": "modbus-client",
        "name": "Modbus Server",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.100",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "",
        "serialConnectionDelay": "",
        "serialAsciiResponseStartDelimiter": "",
        "unit_id": 100,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "d065875da10205cd",
        "type": "modbus-client",
        "name": "USR-M100_serial",
        "clienttype": "serial",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "127.0.0.1",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "COM4",
        "serialType": "RTU",
        "serialBaudrate": "115200",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "100",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "bc1023506614f084",
        "type": "ui-base",
        "name": "Valores sensores",
        "path": "/dashboard",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false,
        "navigationStyle": "temporary",
        "titleBarStyle": "hidden"
    },
    {
        "id": "53bbd3554f5781e9",
        "type": "ui-page",
        "name": "Tablero principal",
        "ui": "bc1023506614f084",
        "path": "/pageN",
        "icon": "home",
        "layout": "grid",
        "theme": "60ac3cbdefc9f2e1",
        "order": 1,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "3f690bb5a526a246",
        "type": "ui-group",
        "name": "Variables de proceso",
        "page": "53bbd3554f5781e9",
        "width": "12",
        "height": "2",
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "60ac3cbdefc9f2e1",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0300cc",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "14px",
            "density": "default"
        }
    },
    {
        "id": "a3f93d08fd9f5245",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "timeout": "10",
        "rejectUnauthorized": true
    },
    {
        "id": "cf4bce8f993858ac",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "flujo",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "timeout": "10",
        "rejectUnauthorized": true
    },
    {
        "id": "ed48d447e5ea8d0c",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "influxdb_refineria",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "timeout": "10",
        "rejectUnauthorized": true
    },
    {
        "id": "da808a9572da86ac",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "be3423b36e62bb32",
        "type": "ui_tab",
        "name": "Monitoreo",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "bd77dc45c5cd8d11",
        "type": "ui_group",
        "name": "Sensores",
        "tab": "be3423b36e62bb32",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "abcd1234",
        "type": "serial-port",
        "serialport": "/dev/ttyUSB0",
        "serialbaud": 57600,
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "newline": "",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "abcd5678",
        "type": "serial-port",
        "serialport": "/dev/ttyUSB1",
        "serialbaud": 57600,
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "newline": "",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "aaac317de36dda4f",
        "type": "serial-port",
        "serialport": "/dev/ttyUSB0",
        "serialbaud": 57600,
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "newline": "",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "b4565baa97d43ef9",
        "type": "serial-port",
        "serialport": "/dev/ttyUSB1",
        "serialbaud": 57600,
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "newline": "",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "20566838667fb145",
        "type": "serial-port",
        "serialport": "/dev/ttyUSB0",
        "serialbaud": 57600,
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "newline": "",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "ac32fb280e4bb5e2",
        "type": "serial-port",
        "serialport": "/dev/ttyUSB1",
        "serialbaud": 57600,
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "newline": "",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "8f724134dab0a8aa",
        "type": "serial-port",
        "serialport": "/dev/ttyUSB0",
        "serialbaud": 57600,
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "newline": "",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "9249311daa14387f",
        "type": "serial-port",
        "serialport": "/dev/ttyUSB1",
        "serialbaud": 57600,
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "newline": "",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "2f9523ff5d386a31",
        "type": "serial-port",
        "serialport": "/dev/ttyACM0",
        "serialbaud": 57600,
        "databits": "7",
        "parity": "even",
        "stopbits": "1",
        "newline": "",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "5ce554f3bf059e46",
        "type": "serial-port",
        "serialport": "/dev/ttyACM0",
        "serialbaud": 57600,
        "databits": "7",
        "parity": "even",
        "stopbits": "1",
        "newline": "",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "3fda7827b7b83ee3",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "sensores",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://influxdb2:8086",
        "timeout": "10",
        "rejectUnauthorized": true
    },
    {
        "id": "a1b3d7fc83d5c6f6",
        "type": "Stackhero-InfluxDB-v2-Server",
        "name": "",
        "host": "localhost",
        "port": "8086",
        "tls": false
    },
    {
        "id": "661d09df777a5259",
        "type": "modbus-client",
        "name": "pruebas",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.75",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB0",
        "serialType": "RTU",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "bd786e5f9167b374",
        "type": "ui_group",
        "name": "Metrics",
        "tab": "3186c0f63f57d285",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "3186c0f63f57d285",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "53d1223c6eb97ee6",
        "type": "ui_group",
        "name": "Metrics",
        "tab": "1958d6172d6fd908",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "1958d6172d6fd908",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "8215fa877ea82ffb",
        "type": "modbus-client",
        "name": "ADC4",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.105",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "934e690f19abf846",
        "type": "mqtt-broker",
        "name": "MF-4.1",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "e6427d1c708697c3",
        "type": "mqtt-broker",
        "name": "MF-9.1",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "f1863aa60a5037d3",
        "type": "mqtt-broker",
        "name": "MN-2B",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "c99a234aaa8cc852",
        "type": "mqtt-broker",
        "name": "mqtt_tb_ST-4.1",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "5b8051f8738b5bd7",
        "type": "mqtt-broker",
        "name": "mqtt_tb_ST-4.2",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "14133b96d4a2800e",
        "type": "mqtt-broker",
        "name": "mqtt_tb_ST-4.3",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "9474aea99136929c",
        "type": "mqtt-broker",
        "name": "mqtt_tb_ST-4.4",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "053dd1065b3e9369",
        "type": "modbus-client",
        "name": "Waveshare Modbus RTU",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.201",
        "tcpPort": "503",
        "tcpType": "TCP-RTU-BUFFERED",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "f828c3bdd94a1080",
        "type": "modbus-client",
        "name": "ADC4",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.206",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "8bae15cf948fa88a",
        "type": "mqtt-broker",
        "name": "MF-4.1",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "2f0db171e0f5b41d",
        "type": "mqtt-broker",
        "name": "MF-9.1",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "e443c1511ad4f443",
        "type": "mqtt-broker",
        "name": "MN-2B",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "faac219c20213937",
        "type": "mqtt-broker",
        "name": "mqtt_tb_ST-4.1",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "afd9e960d4e5dc31",
        "type": "mqtt-broker",
        "name": "mqtt_tb_ST-4.2",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "91368090b030873f",
        "type": "mqtt-broker",
        "name": "mqtt_tb_ST-4.3",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "594baef6432bf7e5",
        "type": "mqtt-broker",
        "name": "mqtt_tb_ST-4.4",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "d149445723242351",
        "type": "modbus-client",
        "name": "ADC-TC-02",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.210",
        "tcpPort": "503",
        "tcpType": "TCP-RTU-BUFFERED",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "f6d4c51382fe0663",
        "type": "modbus-client",
        "name": "DELTA",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.254",
        "tcpPort": "502",
        "tcpType": "TCP-RTU-BUFFERED",
        "serialPort": "/dev/ttyUSB0",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 3000,
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "1d0d79e17648cf5a",
        "type": "modbus-client",
        "name": "ADC-TC-03",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.216",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "sync-group",
        "type": "ui_group",
        "name": "Sincronización",
        "tab": "sync-dashboard",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "sync-dashboard",
        "type": "ui_tab",
        "name": "Git Sync",
        "icon": "git",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "c0ae77d76fc0b798",
        "type": "Stackhero-InfluxDB-v2-Server",
        "name": "CONFIG-DOCKER",
        "host": "influxdb",
        "port": "8086",
        "tls": false
    },
    {
        "id": "a795cdef49ef1786",
        "type": "ui_group",
        "name": "Control del sistema",
        "tab": "a92569ec83aa763f",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "a92569ec83aa763f",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "2e3c931fa3bbfc50",
        "type": "ui_group",
        "name": "Control del sistema",
        "tab": "03dbcbd020cf4411",
        "order": 1,
        "width": "12",
        "collapse": false
    },
    {
        "id": "03dbcbd020cf4411",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "group1",
        "type": "ui_group",
        "name": "Control del sistema",
        "tab": "tab1",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "tab1",
        "type": "ui_tab",
        "name": "Tablero",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "12fecd1437a645f5",
        "type": "inject",
        "z": "ef484dfe62883e41",
        "name": "update",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 200,
        "wires": [
            [
                "52f696716f4afee6"
            ]
        ]
    },
    {
        "id": "d647273c49448e09",
        "type": "inject",
        "z": "ef484dfe62883e41",
        "name": "next",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "next",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 160,
        "wires": [
            [
                "52f696716f4afee6"
            ]
        ]
    },
    {
        "id": "0386b98506288d0b",
        "type": "change",
        "z": "ef484dfe62883e41",
        "name": "Advance queue",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "next",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 180,
        "wires": [
            [
                "52f696716f4afee6"
            ]
        ]
    },
    {
        "id": "52f696716f4afee6",
        "type": "function",
        "z": "ef484dfe62883e41",
        "name": "Modbus Queue",
        "func": "let resendifnoresposne = true; // resend the last message is no response is received\nlet resendinterval = 10; // resend last e message every x seconds\nlet online_threshold = 10; // Seconds between updates under which the device is considered online\nlet offline_threshold = 300; // Seconds between updates above which the device is considered offline\n\nlet notifmsg = null;\n\n// Check and make sure the incoming message has a topic\nif ((msg.topic===\"\")||(msg.topic===null)||(msg.topic===undefined)) {\n    node.status({fill:\"red\",shape:\"dot\",text:\"Topic missing\"});\n    return;\n}\n\nlet lastupdate = context.get(\"lastupdate\");\nlet state = context.get(\"state\") | 0;\nlet queue = context.get(\"queue\");\nlet queuecount = 0;\nif (queue === undefined) {\n    queue = [];\n} else {\n    if (Array.isArray(queue)) {\n        queuecount = queue.length;\n    } else {\n        queue = [];\n    }\n}\nlet current = new Date().getTime();\nlet send = false;\n\nswitch (msg.topic.toLowerCase()) {\n    case \"update\":\n        // Update the timer and statistics\n\n        if (lastupdate !== undefined) {\n            notifmsg = { \"topic\": \"Information\", \"payload\": {} };\n            current = current - lastupdate;\n            current = Math.floor(current / 1000);\n            notifmsg.payload.secondsincelastupdate = current;\n            var minute = Math.floor(current / 60);\n            var hour = Math.floor(minute / 60);\n            var day = Math.floor(hour / 24);\n            if (current > 24 * 60 * 60) {\n                notifmsg.payload.updatetext = \"Last update \" + day + \" days, \" + hour % 24 + \" hours, \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else if (current > 60 * 60) {\n                notifmsg.payload.updatetext = \"Last update \" + hour % 24 + \" hours, \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else if (current > 60) {\n                notifmsg.payload.updatetext = \"Last update \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else {\n                notifmsg.payload.updatetext = \"Last update \" + current % 60 + \" seconds ago\";\n            }\n\n            // Resend last message if there is no response from the server\n            if (resendifnoresposne) {\n                if ((current>0) && (current % resendinterval===0)) {\n                    let lastmsg = context.get(\"lastmsg\");\n                    if ((lastmsg!==undefined) && (context.get(\"sent\"))) {\n                        notifmsg.payload.resend = true;\n                        if ((lastmsg.payload.fc === 1) || (lastmsg.payload.fc === 2) || (lastmsg.payload.fc === 3) || (lastmsg.payload.fc === 4)) {\n                            // this is a modbus read request\n                            node.status({ fill: \"green\", shape: \"dot\", text: \"Read re-sent!\" });\n                            return [lastmsg, null, notifmsg];\n                        } else {\n                            // this is a modbus write request\n                            node.status({ fill: \"green\", shape: \"dot\", text: \"Write re-sent!\" });\n                            return [null, lastmsg, notifmsg];\n                        }\n                    }\n                }\n            }\n\n            // Check for online state\n            if (state !== 1) {\n                if (current < online_threshold) {\n                    notifmsg.topic = \"Warning\";\n                    notifmsg.payload.text = \"Device is now online\";\n                    notifmsg.payload.statuschange = true;\n                    state = 1;\n                    context.set(\"state\", state);\n                }\n            } else {\n                if (current > offline_threshold) {\n                    notifmsg.topic = \"Error\";\n                    notifmsg.payload.text = \"Device is not transmitting\";\n                    notifmsg.payload.statuschange = true;\n                    state = 99;\n                    context.set(\"state\", state);\n                }\n            }\n            notifmsg.payload.state = state;\n            if (state===1) {\n                node.status({ fill: \"blue\", shape: \"ring\", text: queuecount+ \" | \"+notifmsg.payload.updatetext });\n            } else {\n                node.status({ fill: \"red\", shape: \"ring\", text: queuecount + \" | \" + notifmsg.payload.updatetext });\n            }\n            return [null, null, notifmsg];\n\n        } else {\n            node.status({ fill: \"grey\", shape: \"ring\", text: \"No data\" });\n        }\n        break;\n    case \"next\":\n        // Update the lastupdate counter\n        context.set(\"lastupdate\", current);\n        context.set(\"sent\", false);\n        send = true;\n        break;\n    case \"reset\":\n        context.set(\"queue\",[]);\n        context.set(\"sent\", false);\n        context.set(\"lastmsg\", undefined);\n        break;\n    default:\n        // The incoming message is a modbus request\n\n        // delete the last msg to prevent from being resent\n        // context.set(\"lastmsg\", undefined);\n\n        // Check if there is already a message in the queue with the same topic. \n        // If there is it needs to be deleted, because we only keep the last message.\n        for (let i=queue.length-1; i>=0; i--) {\n            if (queue[i].topic === msg.topic) {\n                queue.splice(i,1);\n            }\n        }\n\n        // Add the message to the end of the queue\n        queue.push(msg);\n        context.set(\"queue\",queue);\n\n        if (!context.get(\"sent\")) {\n            send = true;\n        }\n        node.status({ fill: \"green\", shape: \"dot\", text: queue.length });\n\n}\n\n// We need to send out a new message\nif (send) {\n\n    if (queue.length>0) {\n        // Get the older message from the array\n        let newmsg = queue[0];\n        // remove this message\n        queue.splice(0,1);\n        context.set(\"queue\",queue);\n        context.set(\"sent\", true);\n        context.set(\"lastmsg\", newmsg);\n\n        if ((newmsg.payload.fc === 1) || (newmsg.payload.fc === 2) || (newmsg.payload.fc === 3) || (newmsg.payload.fc === 4)) {\n            // this is a modbus read request\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Read sent!\" });\n            return[newmsg,null,null];\n        } else {\n            // this is a modbus write request\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Write sent!\" });\n            return [null, newmsg, null];\n        }\n        \n    }\n}\n",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 240,
        "wires": [
            [
                "702d60614439d9df"
            ],
            [],
            [
                "f2f4b14fdb427c13"
            ]
        ],
        "info": "# Modbus Queue\r\n\r\nThis node queueing read and write messages for modbus. Use this node if you are reading and writing the same device with many different requests. E.g. reading different coil/register intervals continously and also writing to the device at the same time.\r\n\r\nIt does a few things:\r\n- queues all messages arrive on the input port\r\n- based on the msg.topic, older messages of the same topci is ignored\r\n- sends out the oldest message and waits for the \r\n- monitors the time since last message and send out report on the output\r\n- handles online/offline status\r\n- resend the last message is response is not received in time\r\n\r\n## Input Data\r\n\r\n### payload\r\n\r\nThe payload should contain the data that gets sent to the flex-getter or flex-write node.\r\nTypical modbus read payload:\r\n`{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":1000,\"quantity\":20}`\r\nTypical modbus write payload:\r\n`{\"value\":false,\"fc\":5,\"unitid\":1,\"address\":0,\"quantity\":1}`\r\n\r\n### topic\r\n\r\nEach message must contain a topic (any text), and this topic is used to identify the different read/write requests and delete any earlier request with the same topic if it still in the queueing\r\n\r\nThere are a few reserved topic for special function (for these payload is ignored):\r\n- reset: resets the queue and deleted any data collected so far\r\n- next: this is the message fed back from the flex getter/write node to indicate to this node that a new message can be sent out\r\n- update: this should be coming from a 1 second time to display the current queue count, time since the last update and online/offline status\r\n\r\n## Output ports\r\n\r\n### Port 1: flex getter\r\n\r\nThis output should be connected to a modbos-flex-getter and all the read requests will be sent out through this port\r\n\r\n### Port 2: flex write\r\n\r\nThis output should be connected to a modbos-flex-write and all the write requests will be sent out through this port\r\n\r\n### Port 3: status messages\r\n\r\nThis port outputs a status message for every update message (msg.topic=\"update\").\r\n\r\n- topic: \"Information\" for regular updates, \"Warning\": offline device is now back online, \"Error\": device is offline\r\n- payload.text: message like when the device gone offline, or back online\r\n- payload.updatetext: time passed since the last update (human readable format)\r\n- payload.secondsincelastupdate: number of seconds since the last update from the device\r\n- payload.statuschange: true if status is changed (gone offline, back online)\r\n- payload.state: 0: initial state, no data yet, 1: device online, 99: device offline\r\n\r\n## Node Settings\r\n\r\nChange the settings in the first 4 lines of the code to influence the behaviour. Explanation is in the code as comment."
    },
    {
        "id": "afab3d0273902dbf",
        "type": "inject",
        "z": "ef484dfe62883e41",
        "name": "reset",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 120,
        "wires": [
            [
                "52f696716f4afee6"
            ]
        ]
    },
    {
        "id": "f2f4b14fdb427c13",
        "type": "function",
        "z": "ef484dfe62883e41",
        "name": "update log",
        "func": "if (msg.topic === \"Information\") {\n    // Registrar mensajes de información\n    node.log(\"Información: \" + msg.payload.updatetext);\n} else if (msg.topic === \"Warning\") {\n    // Registrar mensajes de advertencia\n    node.warn(\"Advertencia: \" + msg.payload.text);\n} else if (msg.topic === \"Error\") {\n    // Registrar mensajes de error\n    node.error(\"Error: \" + msg.payload.text);\n}\n\n// Puedes agregar lógica adicional para procesar otros campos del mensaje de estado\n// Por ejemplo, puedes verificar el valor de msg.payload.state para realizar acciones específicas\n// según el estado del dispositivo (en línea, fuera de línea, etc.)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "5bcebb41d92bf61c",
        "type": "inject",
        "z": "ef484dfe62883e41",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 280,
        "wires": [
            [
                "52f696716f4afee6",
                "b3cb6bc705334ae6"
            ]
        ]
    },
    {
        "id": "f567f8f27fb7333c",
        "type": "function",
        "z": "ef484dfe62883e41",
        "name": "Data Accumulation Node",
        "func": "let cola = flow.get(\"colaLecturas\") || [];\nconst tiempoMaximo = 300000; // 5 minutos en milisegundos\n\n// Añadir nuevo registro con timestamp actual si no viene incluido en el mensaje\nconst tiempoRegistro = msg.payload.timestamp || Date.now();  // Usar timestamp del mensaje o el tiempo actual si no está disponible\ncola.push({\n    tiempo: tiempoRegistro,\n    volumen: msg.payload[0] // Asumiendo que el volumen viene en msg.payload como primer elemento del array\n});\n\n// Eliminar registros más antiguos que el tiempo máximo permitido\nlet tiempoActual = Date.now();\ncola = cola.filter(registro => (tiempoActual - registro.tiempo) <= tiempoMaximo);\n\n// Guardar la cola actualizada en el contexto del flujo\nflow.set(\"colaLecturas\", cola);\n\n// Pasar la cola completa al siguiente nodo para su procesamiento\nreturn { payload: cola };\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 220,
        "wires": [
            [
                "774d1a1e5fe9a62c"
            ]
        ]
    },
    {
        "id": "774d1a1e5fe9a62c",
        "type": "function",
        "z": "ef484dfe62883e41",
        "name": "Flow Calculation Node",
        "func": "const cola = msg.payload;\nlet flujo = 0;\n\nif (cola.length > 1) {\n    const primerRegistro = cola[0];\n    const ultimoRegistro = cola[cola.length - 1];\n    const tiempoDiferencia = (ultimoRegistro.tiempo - primerRegistro.tiempo) / 1000; // en segundos\n\n    // Convertir los valores de volumen según la escala proporcionada\n    const volumenInicial = ((primerRegistro.volumen - 4000) / (20000 - 4000)) * (40000 - 0);\n    const volumenFinal = ((ultimoRegistro.volumen - 4000) / (20000 - 4000)) * (40000 - 0);\n\n    if (tiempoDiferencia > 0) {\n        flujo = Math.round(-((volumenFinal - volumenInicial) / tiempoDiferencia) * 3600); // calcular flujo\n    }\n} else {\n    // Manejar el caso cuando no hay suficientes registros para calcular un flujo\n    flujo = \"Insuficientes datos para cálculo de flujo\";\n}\n\n// Devolver el valor del flujo\nreturn { payload: flujo };\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 220,
        "wires": [
            [
                "format-for-table"
            ]
        ]
    },
    {
        "id": "702d60614439d9df",
        "type": "modbus-flex-getter",
        "z": "ef484dfe62883e41",
        "name": "ADC-TC-01",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "60e5d9130b1268c8",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 690,
        "y": 220,
        "wires": [
            [
                "0386b98506288d0b",
                "5ca4dd842f5cab2f"
            ],
            []
        ]
    },
    {
        "id": "5ca4dd842f5cab2f",
        "type": "switch",
        "z": "ef484dfe62883e41",
        "name": "ADC-TC-01 CANALES",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "read_ADC1_AI0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC1_AI1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC1_AI2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC1_AI3",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 880,
        "y": 220,
        "wires": [
            [
                "ebd8a6041841f03c"
            ],
            [
                "f567f8f27fb7333c",
                "c8c3d9c78bd47532"
            ],
            [],
            [
                "ea509f3d24aca312"
            ]
        ]
    },
    {
        "id": "c296231e87efaef1",
        "type": "modbus-flex-getter",
        "z": "ef484dfe62883e41",
        "name": "ADC-TC-02",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "d149445723242351",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 690,
        "y": 300,
        "wires": [
            [
                "daf14ab530413bfa",
                "ad59eabbf7007479"
            ],
            []
        ]
    },
    {
        "id": "daf14ab530413bfa",
        "type": "change",
        "z": "ef484dfe62883e41",
        "name": "Advance queue",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "next",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 380,
        "wires": [
            [
                "b3cb6bc705334ae6"
            ]
        ]
    },
    {
        "id": "ad59eabbf7007479",
        "type": "switch",
        "z": "ef484dfe62883e41",
        "name": "ADC-TC-02 CANALES",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "read_ADC2_AI1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC2_AI2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC2_AI3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC2_AI4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ADC-TC-02-5",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ADC-TC-02-6",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ADC-TC-02-7",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ADC-TC-02-8",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 8,
        "x": 880,
        "y": 320,
        "wires": [
            [],
            [],
            [
                "9f9f23f8c1e49e15"
            ],
            [],
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "b3cb6bc705334ae6",
        "type": "function",
        "z": "ef484dfe62883e41",
        "name": "Modbus Queue",
        "func": "let resendifnoresposne = true; // resend the last message is no response is received\nlet resendinterval = 10; // resend last e message every x seconds\nlet online_threshold = 10; // Seconds between updates under which the device is considered online\nlet offline_threshold = 300; // Seconds between updates above which the device is considered offline\n\nlet notifmsg = null;\n\n// Check and make sure the incoming message has a topic\nif ((msg.topic===\"\")||(msg.topic===null)||(msg.topic===undefined)) {\n    node.status({fill:\"red\",shape:\"dot\",text:\"Topic missing\"});\n    return;\n}\n\nlet lastupdate = context.get(\"lastupdate\");\nlet state = context.get(\"state\") | 0;\nlet queue = context.get(\"queue\");\nlet queuecount = 0;\nif (queue === undefined) {\n    queue = [];\n} else {\n    if (Array.isArray(queue)) {\n        queuecount = queue.length;\n    } else {\n        queue = [];\n    }\n}\nlet current = new Date().getTime();\nlet send = false;\n\nswitch (msg.topic.toLowerCase()) {\n    case \"update\":\n        // Update the timer and statistics\n\n        if (lastupdate !== undefined) {\n            notifmsg = { \"topic\": \"Information\", \"payload\": {} };\n            current = current - lastupdate;\n            current = Math.floor(current / 1000);\n            notifmsg.payload.secondsincelastupdate = current;\n            var minute = Math.floor(current / 60);\n            var hour = Math.floor(minute / 60);\n            var day = Math.floor(hour / 24);\n            if (current > 24 * 60 * 60) {\n                notifmsg.payload.updatetext = \"Last update \" + day + \" days, \" + hour % 24 + \" hours, \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else if (current > 60 * 60) {\n                notifmsg.payload.updatetext = \"Last update \" + hour % 24 + \" hours, \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else if (current > 60) {\n                notifmsg.payload.updatetext = \"Last update \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else {\n                notifmsg.payload.updatetext = \"Last update \" + current % 60 + \" seconds ago\";\n            }\n\n            // Resend last message if there is no response from the server\n            if (resendifnoresposne) {\n                if ((current>0) && (current % resendinterval===0)) {\n                    let lastmsg = context.get(\"lastmsg\");\n                    if ((lastmsg!==undefined) && (context.get(\"sent\"))) {\n                        notifmsg.payload.resend = true;\n                        if ((lastmsg.payload.fc === 1) || (lastmsg.payload.fc === 2) || (lastmsg.payload.fc === 3) || (lastmsg.payload.fc === 4)) {\n                            // this is a modbus read request\n                            node.status({ fill: \"green\", shape: \"dot\", text: \"Read re-sent!\" });\n                            return [lastmsg, null, notifmsg];\n                        } else {\n                            // this is a modbus write request\n                            node.status({ fill: \"green\", shape: \"dot\", text: \"Write re-sent!\" });\n                            return [null, lastmsg, notifmsg];\n                        }\n                    }\n                }\n            }\n\n            // Check for online state\n            if (state !== 1) {\n                if (current < online_threshold) {\n                    notifmsg.topic = \"Warning\";\n                    notifmsg.payload.text = \"Device is now online\";\n                    notifmsg.payload.statuschange = true;\n                    state = 1;\n                    context.set(\"state\", state);\n                }\n            } else {\n                if (current > offline_threshold) {\n                    notifmsg.topic = \"Error\";\n                    notifmsg.payload.text = \"Device is not transmitting\";\n                    notifmsg.payload.statuschange = true;\n                    state = 99;\n                    context.set(\"state\", state);\n                }\n            }\n            notifmsg.payload.state = state;\n            if (state===1) {\n                node.status({ fill: \"blue\", shape: \"ring\", text: queuecount+ \" | \"+notifmsg.payload.updatetext });\n            } else {\n                node.status({ fill: \"red\", shape: \"ring\", text: queuecount + \" | \" + notifmsg.payload.updatetext });\n            }\n            return [null, null, notifmsg];\n\n        } else {\n            node.status({ fill: \"grey\", shape: \"ring\", text: \"No data\" });\n        }\n        break;\n    case \"next\":\n        // Update the lastupdate counter\n        context.set(\"lastupdate\", current);\n        context.set(\"sent\", false);\n        send = true;\n        break;\n    case \"reset\":\n        context.set(\"queue\",[]);\n        context.set(\"sent\", false);\n        context.set(\"lastmsg\", undefined);\n        break;\n    default:\n        // The incoming message is a modbus request\n\n        // delete the last msg to prevent from being resent\n        // context.set(\"lastmsg\", undefined);\n\n        // Check if there is already a message in the queue with the same topic. \n        // If there is it needs to be deleted, because we only keep the last message.\n        for (let i=queue.length-1; i>=0; i--) {\n            if (queue[i].topic === msg.topic) {\n                queue.splice(i,1);\n            }\n        }\n\n        // Add the message to the end of the queue\n        queue.push(msg);\n        context.set(\"queue\",queue);\n\n        if (!context.get(\"sent\")) {\n            send = true;\n        }\n        node.status({ fill: \"green\", shape: \"dot\", text: queue.length });\n\n}\n\n// We need to send out a new message\nif (send) {\n\n    if (queue.length>0) {\n        // Get the older message from the array\n        let newmsg = queue[0];\n        // remove this message\n        queue.splice(0,1);\n        context.set(\"queue\",queue);\n        context.set(\"sent\", true);\n        context.set(\"lastmsg\", newmsg);\n\n        if ((newmsg.payload.fc === 1) || (newmsg.payload.fc === 2) || (newmsg.payload.fc === 3) || (newmsg.payload.fc === 4)) {\n            // this is a modbus read request\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Read sent!\" });\n            return[newmsg,null,null];\n        } else {\n            // this is a modbus write request\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Write sent!\" });\n            return [null, newmsg, null];\n        }\n        \n    }\n}\n",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 320,
        "wires": [
            [
                "c296231e87efaef1"
            ],
            [],
            [
                "c3c62a82f39994f1"
            ]
        ],
        "info": "# Modbus Queue\r\n\r\nThis node queueing read and write messages for modbus. Use this node if you are reading and writing the same device with many different requests. E.g. reading different coil/register intervals continously and also writing to the device at the same time.\r\n\r\nIt does a few things:\r\n- queues all messages arrive on the input port\r\n- based on the msg.topic, older messages of the same topci is ignored\r\n- sends out the oldest message and waits for the \r\n- monitors the time since last message and send out report on the output\r\n- handles online/offline status\r\n- resend the last message is response is not received in time\r\n\r\n## Input Data\r\n\r\n### payload\r\n\r\nThe payload should contain the data that gets sent to the flex-getter or flex-write node.\r\nTypical modbus read payload:\r\n`{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":1000,\"quantity\":20}`\r\nTypical modbus write payload:\r\n`{\"value\":false,\"fc\":5,\"unitid\":1,\"address\":0,\"quantity\":1}`\r\n\r\n### topic\r\n\r\nEach message must contain a topic (any text), and this topic is used to identify the different read/write requests and delete any earlier request with the same topic if it still in the queueing\r\n\r\nThere are a few reserved topic for special function (for these payload is ignored):\r\n- reset: resets the queue and deleted any data collected so far\r\n- next: this is the message fed back from the flex getter/write node to indicate to this node that a new message can be sent out\r\n- update: this should be coming from a 1 second time to display the current queue count, time since the last update and online/offline status\r\n\r\n## Output ports\r\n\r\n### Port 1: flex getter\r\n\r\nThis output should be connected to a modbos-flex-getter and all the read requests will be sent out through this port\r\n\r\n### Port 2: flex write\r\n\r\nThis output should be connected to a modbos-flex-write and all the write requests will be sent out through this port\r\n\r\n### Port 3: status messages\r\n\r\nThis port outputs a status message for every update message (msg.topic=\"update\").\r\n\r\n- topic: \"Information\" for regular updates, \"Warning\": offline device is now back online, \"Error\": device is offline\r\n- payload.text: message like when the device gone offline, or back online\r\n- payload.updatetext: time passed since the last update (human readable format)\r\n- payload.secondsincelastupdate: number of seconds since the last update from the device\r\n- payload.statuschange: true if status is changed (gone offline, back online)\r\n- payload.state: 0: initial state, no data yet, 1: device online, 99: device offline\r\n\r\n## Node Settings\r\n\r\nChange the settings in the first 4 lines of the code to influence the behaviour. Explanation is in the code as comment."
    },
    {
        "id": "c3c62a82f39994f1",
        "type": "function",
        "z": "ef484dfe62883e41",
        "name": "update log",
        "func": "if (msg.topic === \"Information\") {\n    // Registrar mensajes de información\n    node.log(\"Información: \" + msg.payload.updatetext);\n} else if (msg.topic === \"Warning\") {\n    // Registrar mensajes de advertencia\n    node.warn(\"Advertencia: \" + msg.payload.text);\n} else if (msg.topic === \"Error\") {\n    // Registrar mensajes de error\n    node.error(\"Error: \" + msg.payload.text);\n}\n\n// Puedes agregar lógica adicional para procesar otros campos del mensaje de estado\n// Por ejemplo, puedes verificar el valor de msg.payload.state para realizar acciones específicas\n// según el estado del dispositivo (en línea, fuera de línea, etc.)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "a2f032b5ccecbe54",
        "type": "inject",
        "z": "ef484dfe62883e41",
        "name": "update",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 440,
        "wires": [
            [
                "b3cb6bc705334ae6"
            ]
        ]
    },
    {
        "id": "84c66bdb2e2637ac",
        "type": "inject",
        "z": "ef484dfe62883e41",
        "name": "next",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "next",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 400,
        "wires": [
            [
                "b3cb6bc705334ae6"
            ]
        ]
    },
    {
        "id": "6cea0b2e88675168",
        "type": "inject",
        "z": "ef484dfe62883e41",
        "name": "reset",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 360,
        "wires": [
            [
                "b3cb6bc705334ae6"
            ]
        ]
    },
    {
        "id": "bccb80ece0db52e0",
        "type": "inject",
        "z": "ef484dfe62883e41",
        "name": "ADC-TC-01",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 240,
        "wires": [
            [
                "cfa9ea269d1301f9"
            ]
        ]
    },
    {
        "id": "cfa9ea269d1301f9",
        "type": "function",
        "z": "ef484dfe62883e41",
        "name": "ADC-TC-01 Requests",
        "func": "// Build ADC requests\n// Se define un array de solicitudes ADC.\nvar adcRequests = [\n    { topic: \"read_ADC1_AI0\", payload: { value: 0, fc: 4, unitid: 1, address: 0, quantity: 1 } },\n    { topic: \"read_ADC1_AI1\", payload: { value: 0, fc: 4, unitid: 1, address: 1, quantity: 1 } },\n    { topic: \"read_ADC1_AI2\", payload: { value: 0, fc: 4, unitid: 1, address: 2, quantity: 1 } },\n    { topic: \"read_ADC1_AI3\", payload: { value: 0, fc: 4, unitid: 1, address: 3, quantity: 1 } },\n];\n\n// Registrar el timestamp de la inyección actual.\nvar now = new Date().getTime();\n// Recuperar el timestamp de la última inyección; si no existe, se usa el valor actual.\nvar lastInjectionTime = context.get(\"lastInjectionTime\") || now;\n// Calcular el intervalo entre inyecciones (en segundos)\nvar interInjectionInterval = (now - lastInjectionTime) / 1000;\ncontext.set(\"lastInjectionTime\", now);\n\n// Para cada solicitud, se adjunta el timestamp actual y el intervalo entre inyecciones.\nadcRequests.forEach(function(req) {\n    req.requestTime = now;             // Para medir la duración de la lectura\n    req.injectInterval = interInjectionInterval; // Intervalo entre esta inyección y la anterior\n    node.send(req);\n});\n\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 240,
        "wires": [
            [
                "52f696716f4afee6"
            ]
        ]
    },
    {
        "id": "81add0f909b7fc96",
        "type": "inject",
        "z": "ef484dfe62883e41",
        "name": "ADC-TC-02",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 320,
        "wires": [
            [
                "190e11b017a746c7"
            ]
        ]
    },
    {
        "id": "190e11b017a746c7",
        "type": "function",
        "z": "ef484dfe62883e41",
        "name": "ADC-TC-02 Requests",
        "func": "// Build ADC requests\n// Se define un array de solicitudes ADC.\nvar adcRequests = [\n    { topic: \"read_ADC2_AI1\", payload: { value: 0, fc: 4, unitid: 1, address: 0, quantity: 1 } },\n    { topic: \"read_ADC2_AI2\", payload: { value: 0, fc: 4, unitid: 1, address: 1, quantity: 1 } },\n    { topic: \"read_ADC2_AI3\", payload: { value: 0, fc: 4, unitid: 1, address: 2, quantity: 1 } },\n    { topic: \"read_ADC2_AI4\", payload: { value: 0, fc: 4, unitid: 1, address: 3, quantity: 1 } },\n    { topic: \"read_ADC2_AI5\", payload: { value: 0, fc: 4, unitid: 1, address: 4, quantity: 1 } },\n    { topic: \"read_ADC2_AI6\", payload: { value: 0, fc: 4, unitid: 1, address: 5, quantity: 1 } },\n    { topic: \"read_ADC2_AI7\", payload: { value: 0, fc: 4, unitid: 1, address: 6, quantity: 1 } },\n    { topic: \"read_ADC2_AI8\", payload: { value: 0, fc: 4, unitid: 1, address: 7, quantity: 1 } },\n];\n\n// Registrar el timestamp de la inyección actual.\nvar now = new Date().getTime();\n// Recuperar el timestamp de la última inyección; si no existe, se usa el valor actual.\nvar lastInjectionTime = context.get(\"lastInjectionTime\") || now;\n// Calcular el intervalo entre inyecciones (en segundos)\nvar interInjectionInterval = (now - lastInjectionTime) / 1000;\ncontext.set(\"lastInjectionTime\", now);\n\n// Para cada solicitud, se adjunta el timestamp actual y el intervalo entre inyecciones.\nadcRequests.forEach(function(req) {\n    req.requestTime = now;             // Para medir la duración de la lectura\n    req.injectInterval = interInjectionInterval; // Intervalo entre esta inyección y la anterior\n    node.send(req);\n});\n\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 320,
        "wires": [
            [
                "b3cb6bc705334ae6"
            ]
        ]
    },
    {
        "id": "format-for-table",
        "type": "function",
        "z": "ef484dfe62883e41",
        "name": "Formato para Tabla",
        "func": "// Preservar el payload original\nlet valor = msg.payload;\n\n// Agregar información para la tabla unificada\nmsg.nombre = \"Flujo Materia Prima\";\nmsg.unidades = \"L/h\";\n\n// Si el valor es una cadena (mensaje de error), mostrar como está\nif (typeof valor === 'string') {\n    // Mantener el mensaje de error\n} else {\n    // Asegurar que sea un número\n    msg.payload = Number(valor);\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 220,
        "wires": [
            [
                "e72027eda7951399"
            ]
        ]
    },
    {
        "id": "e72027eda7951399",
        "type": "link out",
        "z": "ef484dfe62883e41",
        "name": "TC-RE-05",
        "mode": "link",
        "links": [
            "c64e80cac0381523"
        ],
        "x": 1675,
        "y": 220,
        "wires": []
    },
    {
        "id": "ebd8a6041841f03c",
        "type": "function",
        "z": "ef484dfe62883e41",
        "name": "presionAlimentacion",
        "func": "const valorADCMin = 3850;\nconst valorADCMax = 20000;\nconst valorMin = 0;\nconst valorMax = 12.23664;\n\nconst valorADC = msg.payload[0];\nconst valorPresion = ((valorADC - valorADCMin) / (valorADCMax - valorADCMin)) * (valorMax - valorMin) + valorMin;\n\n// Redondear a un decimal\nmsg.payload = Math.round(valorPresion * 10) / 10;\nmsg.nombre = \"Presión Alimentación\";\nmsg.unidades = \"Kg/cm2\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 180,
        "wires": [
            [
                "e72027eda7951399"
            ]
        ]
    },
    {
        "id": "c8c3d9c78bd47532",
        "type": "function",
        "z": "ef484dfe62883e41",
        "name": "volumenFA-02",
        "func": "const valorCrudo = msg.payload[0];\nconst valorLitros = ((valorCrudo - 4000) / (20000 - 4000)) * (40000 - 0);\nmsg.payload = Math.round(valorLitros);  // Mantener solo el valor numérico\nmsg.nombre = \"Volumen FA-02\";\nmsg.unidades = \"Litros\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 260,
        "wires": [
            [
                "e72027eda7951399"
            ]
        ]
    },
    {
        "id": "ea509f3d24aca312",
        "type": "function",
        "z": "ef484dfe62883e41",
        "name": "entradaCalentador",
        "func": "const valorADCMin = 4000;\nconst valorADCMax = 20000;\nconst valorMin = 0;\nconst valorMax = 700;\n\nconst valorADC = msg.payload[0];\nconst valorTemperatura = ((valorADC - valorADCMin) / (valorADCMax - valorADCMin)) * (valorMax - valorMin) + valorMin;\n\nmsg.payload = Math.round(valorTemperatura);\nmsg.nombre = \"Entrada Calentador\";\nmsg.unidades = \"°C\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 300,
        "wires": [
            [
                "e72027eda7951399"
            ]
        ]
    },
    {
        "id": "9f9f23f8c1e49e15",
        "type": "function",
        "z": "ef484dfe62883e41",
        "name": "salidaCalentador",
        "func": "const valorADCMin = 4000;\nconst valorADCMax = 20000;\nconst valorMin = 0;\nconst valorMax = 1038;\n\nconst valorADC = msg.payload[0];\nconst valorTemperatura = ((valorADC - valorADCMin) / (valorADCMax - valorADCMin)) * (valorMax - valorMin) + valorMin;\n\nmsg.payload = Math.round(valorTemperatura);\nmsg.nombre = \"Salida Calentador\";\nmsg.unidades = \"°C\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 340,
        "wires": [
            [
                "e72027eda7951399"
            ]
        ]
    },
    {
        "id": "f7ddabd37f11d5a1",
        "type": "inject",
        "z": "237db71295252168",
        "name": "update",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 500,
        "wires": [
            [
                "a3a556a1e3a2394d"
            ]
        ]
    },
    {
        "id": "e9257a8a0c34fccd",
        "type": "inject",
        "z": "237db71295252168",
        "name": "next",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "next",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 460,
        "wires": [
            [
                "a3a556a1e3a2394d"
            ]
        ]
    },
    {
        "id": "a35b50c76128749b",
        "type": "change",
        "z": "237db71295252168",
        "name": "Advance queue",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "next",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 600,
        "wires": [
            [
                "a3a556a1e3a2394d"
            ]
        ]
    },
    {
        "id": "a3a556a1e3a2394d",
        "type": "function",
        "z": "237db71295252168",
        "name": "Modbus Queue",
        "func": "let resendifnoresposne = true; // resend the last message is no response is received\nlet resendinterval = 10; // resend last e message every x seconds\nlet online_threshold = 10; // Seconds between updates under which the device is considered online\nlet offline_threshold = 300; // Seconds between updates above which the device is considered offline\n\nlet notifmsg = null;\n\n// Check and make sure the incoming message has a topic\nif ((msg.topic===\"\")||(msg.topic===null)||(msg.topic===undefined)) {\n    node.status({fill:\"red\",shape:\"dot\",text:\"Topic missing\"});\n    return;\n}\n\nlet lastupdate = context.get(\"lastupdate\");\nlet state = context.get(\"state\") | 0;\nlet queue = context.get(\"queue\");\nlet queuecount = 0;\nif (queue === undefined) {\n    queue = [];\n} else {\n    if (Array.isArray(queue)) {\n        queuecount = queue.length;\n    } else {\n        queue = [];\n    }\n}\nlet current = new Date().getTime();\nlet send = false;\n\nswitch (msg.topic.toLowerCase()) {\n    case \"update\":\n        // Update the timer and statistics\n\n        if (lastupdate !== undefined) {\n            notifmsg = { \"topic\": \"Information\", \"payload\": {} };\n            current = current - lastupdate;\n            current = Math.floor(current / 1000);\n            notifmsg.payload.secondsincelastupdate = current;\n            var minute = Math.floor(current / 60);\n            var hour = Math.floor(minute / 60);\n            var day = Math.floor(hour / 24);\n            if (current > 24 * 60 * 60) {\n                notifmsg.payload.updatetext = \"Last update \" + day + \" days, \" + hour % 24 + \" hours, \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else if (current > 60 * 60) {\n                notifmsg.payload.updatetext = \"Last update \" + hour % 24 + \" hours, \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else if (current > 60) {\n                notifmsg.payload.updatetext = \"Last update \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else {\n                notifmsg.payload.updatetext = \"Last update \" + current % 60 + \" seconds ago\";\n            }\n\n            // Resend last message if there is no response from the server\n            if (resendifnoresposne) {\n                if ((current>0) && (current % resendinterval===0)) {\n                    let lastmsg = context.get(\"lastmsg\");\n                    if ((lastmsg!==undefined) && (context.get(\"sent\"))) {\n                        notifmsg.payload.resend = true;\n                        if ((lastmsg.payload.fc === 1) || (lastmsg.payload.fc === 2) || (lastmsg.payload.fc === 3) || (lastmsg.payload.fc === 4)) {\n                            // this is a modbus read request\n                            node.status({ fill: \"green\", shape: \"dot\", text: \"Read re-sent!\" });\n                            return [lastmsg, null, notifmsg];\n                        } else {\n                            // this is a modbus write request\n                            node.status({ fill: \"green\", shape: \"dot\", text: \"Write re-sent!\" });\n                            return [null, lastmsg, notifmsg];\n                        }\n                    }\n                }\n            }\n\n            // Check for online state\n            if (state !== 1) {\n                if (current < online_threshold) {\n                    notifmsg.topic = \"Warning\";\n                    notifmsg.payload.text = \"Device is now online\";\n                    notifmsg.payload.statuschange = true;\n                    state = 1;\n                    context.set(\"state\", state);\n                }\n            } else {\n                if (current > offline_threshold) {\n                    notifmsg.topic = \"Error\";\n                    notifmsg.payload.text = \"Device is not transmitting\";\n                    notifmsg.payload.statuschange = true;\n                    state = 99;\n                    context.set(\"state\", state);\n                }\n            }\n            notifmsg.payload.state = state;\n            if (state===1) {\n                node.status({ fill: \"blue\", shape: \"ring\", text: queuecount+ \" | \"+notifmsg.payload.updatetext });\n            } else {\n                node.status({ fill: \"red\", shape: \"ring\", text: queuecount + \" | \" + notifmsg.payload.updatetext });\n            }\n            return [null, null, notifmsg];\n\n        } else {\n            node.status({ fill: \"grey\", shape: \"ring\", text: \"No data\" });\n        }\n        break;\n    case \"next\":\n        // Update the lastupdate counter\n        context.set(\"lastupdate\", current);\n        context.set(\"sent\", false);\n        send = true;\n        break;\n    case \"reset\":\n        context.set(\"queue\",[]);\n        context.set(\"sent\", false);\n        context.set(\"lastmsg\", undefined);\n        break;\n    default:\n        // The incoming message is a modbus request\n\n        // delete the last msg to prevent from being resent\n        // context.set(\"lastmsg\", undefined);\n\n        // Check if there is already a message in the queue with the same topic. \n        // If there is it needs to be deleted, because we only keep the last message.\n        for (let i=queue.length-1; i>=0; i--) {\n            if (queue[i].topic === msg.topic) {\n                queue.splice(i,1);\n            }\n        }\n\n        // Add the message to the end of the queue\n        queue.push(msg);\n        context.set(\"queue\",queue);\n\n        if (!context.get(\"sent\")) {\n            send = true;\n        }\n        node.status({ fill: \"green\", shape: \"dot\", text: queue.length });\n\n}\n\n// We need to send out a new message\nif (send) {\n\n    if (queue.length>0) {\n        // Get the older message from the array\n        let newmsg = queue[0];\n        // remove this message\n        queue.splice(0,1);\n        context.set(\"queue\",queue);\n        context.set(\"sent\", true);\n        context.set(\"lastmsg\", newmsg);\n\n        if ((newmsg.payload.fc === 1) || (newmsg.payload.fc === 2) || (newmsg.payload.fc === 3) || (newmsg.payload.fc === 4)) {\n            // this is a modbus read request\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Read sent!\" });\n            return[newmsg,null,null];\n        } else {\n            // this is a modbus write request\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Write sent!\" });\n            return [null, newmsg, null];\n        }\n        \n    }\n}\n",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 700,
        "wires": [
            [
                "a5e6ed752d51dd28"
            ],
            [],
            [
                "9dc561e049e2d644"
            ]
        ],
        "info": "# Modbus Queue\r\n\r\nThis node queueing read and write messages for modbus. Use this node if you are reading and writing the same device with many different requests. E.g. reading different coil/register intervals continously and also writing to the device at the same time.\r\n\r\nIt does a few things:\r\n- queues all messages arrive on the input port\r\n- based on the msg.topic, older messages of the same topci is ignored\r\n- sends out the oldest message and waits for the \r\n- monitors the time since last message and send out report on the output\r\n- handles online/offline status\r\n- resend the last message is response is not received in time\r\n\r\n## Input Data\r\n\r\n### payload\r\n\r\nThe payload should contain the data that gets sent to the flex-getter or flex-write node.\r\nTypical modbus read payload:\r\n`{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":1000,\"quantity\":20}`\r\nTypical modbus write payload:\r\n`{\"value\":false,\"fc\":5,\"unitid\":1,\"address\":0,\"quantity\":1}`\r\n\r\n### topic\r\n\r\nEach message must contain a topic (any text), and this topic is used to identify the different read/write requests and delete any earlier request with the same topic if it still in the queueing\r\n\r\nThere are a few reserved topic for special function (for these payload is ignored):\r\n- reset: resets the queue and deleted any data collected so far\r\n- next: this is the message fed back from the flex getter/write node to indicate to this node that a new message can be sent out\r\n- update: this should be coming from a 1 second time to display the current queue count, time since the last update and online/offline status\r\n\r\n## Output ports\r\n\r\n### Port 1: flex getter\r\n\r\nThis output should be connected to a modbos-flex-getter and all the read requests will be sent out through this port\r\n\r\n### Port 2: flex write\r\n\r\nThis output should be connected to a modbos-flex-write and all the write requests will be sent out through this port\r\n\r\n### Port 3: status messages\r\n\r\nThis port outputs a status message for every update message (msg.topic=\"update\").\r\n\r\n- topic: \"Information\" for regular updates, \"Warning\": offline device is now back online, \"Error\": device is offline\r\n- payload.text: message like when the device gone offline, or back online\r\n- payload.updatetext: time passed since the last update (human readable format)\r\n- payload.secondsincelastupdate: number of seconds since the last update from the device\r\n- payload.statuschange: true if status is changed (gone offline, back online)\r\n- payload.state: 0: initial state, no data yet, 1: device online, 99: device offline\r\n\r\n## Node Settings\r\n\r\nChange the settings in the first 4 lines of the code to influence the behaviour. Explanation is in the code as comment."
    },
    {
        "id": "4f4c87eac2fb3b4a",
        "type": "inject",
        "z": "237db71295252168",
        "name": "reset",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 420,
        "wires": [
            [
                "a3a556a1e3a2394d"
            ]
        ]
    },
    {
        "id": "9dc561e049e2d644",
        "type": "function",
        "z": "237db71295252168",
        "name": "update log",
        "func": "if (msg.topic === \"Information\") {\n    // Registrar mensajes de información\n    node.log(\"Información: \" + msg.payload.updatetext);\n} else if (msg.topic === \"Warning\") {\n    // Registrar mensajes de advertencia\n    node.warn(\"Advertencia: \" + msg.payload.text);\n} else if (msg.topic === \"Error\") {\n    // Registrar mensajes de error\n    node.error(\"Error: \" + msg.payload.text);\n}\n\n// Puedes agregar lógica adicional para procesar otros campos del mensaje de estado\n// Por ejemplo, puedes verificar el valor de msg.payload.state para realizar acciones específicas\n// según el estado del dispositivo (en línea, fuera de línea, etc.)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "081bbf40bb843d80",
        "type": "inject",
        "z": "237db71295252168",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 940,
        "wires": [
            [
                "a3a556a1e3a2394d"
            ]
        ]
    },
    {
        "id": "8cba0414007c4ef8",
        "type": "switch",
        "z": "237db71295252168",
        "name": "ADC2 Registers",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "read_ADC2_AI1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC2_AI2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC2_AI3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC2_AI4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC2_AI5",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC2_AI6",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC2_AI7",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC2_AI8",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC2_AI9",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC2_AI10",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC2_AI11",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC2_AI12",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 12,
        "x": 780,
        "y": 680,
        "wires": [
            [
                "6d34fe1cdc2e37e7",
                "43cec8ccf957d186"
            ],
            [
                "7dbd72f118d1fb17"
            ],
            [],
            [
                "548bb0a751518483"
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "3c152f57ed588a39",
        "type": "inject",
        "z": "237db71295252168",
        "name": "ADC_2_AI1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC2_AI1",
        "payload": "{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":96,\"quantity\":1}",
        "payloadType": "json",
        "x": 120,
        "y": 540,
        "wires": [
            [
                "a3a556a1e3a2394d"
            ]
        ]
    },
    {
        "id": "a5e6ed752d51dd28",
        "type": "modbus-flex-getter",
        "z": "237db71295252168",
        "name": "ADC_2",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "f6d4c51382fe0663",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 560,
        "y": 660,
        "wires": [
            [
                "a35b50c76128749b"
            ],
            [
                "8cba0414007c4ef8"
            ]
        ]
    },
    {
        "id": "0334e18c0ec8358a",
        "type": "inject",
        "z": "237db71295252168",
        "name": "ADC_2_AI2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC2_AI2",
        "payload": "{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":97,\"quantity\":1}",
        "payloadType": "json",
        "x": 120,
        "y": 580,
        "wires": [
            [
                "a3a556a1e3a2394d"
            ]
        ]
    },
    {
        "id": "7ee5aa4d51be4c59",
        "type": "inject",
        "z": "237db71295252168",
        "name": "ADC_2_AI3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC2_AI3",
        "payload": "{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":98,\"quantity\":1}",
        "payloadType": "json",
        "x": 120,
        "y": 620,
        "wires": [
            [
                "a3a556a1e3a2394d"
            ]
        ]
    },
    {
        "id": "e41d6765214593b8",
        "type": "inject",
        "z": "237db71295252168",
        "name": "ADC_2_AI4",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC2_AI4",
        "payload": "{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":99,\"quantity\":1}",
        "payloadType": "json",
        "x": 120,
        "y": 660,
        "wires": [
            [
                "a3a556a1e3a2394d"
            ]
        ]
    },
    {
        "id": "9adae7cd2ab254d1",
        "type": "inject",
        "z": "237db71295252168",
        "name": "ADC_2_AI6",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC2_AI6",
        "payload": "{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":101,\"quantity\":1}",
        "payloadType": "json",
        "x": 120,
        "y": 740,
        "wires": [
            [
                "a3a556a1e3a2394d"
            ]
        ]
    },
    {
        "id": "45e03c106be9bfde",
        "type": "inject",
        "z": "237db71295252168",
        "name": "ADC_2_AI5",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC2_AI5",
        "payload": "{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":100,\"quantity\":1}",
        "payloadType": "json",
        "x": 120,
        "y": 700,
        "wires": [
            [
                "a3a556a1e3a2394d"
            ]
        ]
    },
    {
        "id": "91e318e1ed4308e0",
        "type": "inject",
        "z": "237db71295252168",
        "name": "ADC_2_AI7",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC2_AI7",
        "payload": "{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":102,\"quantity\":1}",
        "payloadType": "json",
        "x": 120,
        "y": 780,
        "wires": [
            [
                "a3a556a1e3a2394d"
            ]
        ]
    },
    {
        "id": "573e1681fec4a8f7",
        "type": "inject",
        "z": "237db71295252168",
        "name": "ADC_2_AI8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC2_AI8",
        "payload": "{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":103,\"quantity\":1}",
        "payloadType": "json",
        "x": 120,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "ee532c03e91161c3",
        "type": "inject",
        "z": "237db71295252168",
        "name": "ADC_2_AI9",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC2_AI9",
        "payload": "{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":104,\"quantity\":1}",
        "payloadType": "json",
        "x": 120,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "1c163215a47f5156",
        "type": "inject",
        "z": "237db71295252168",
        "name": "ADC_2_AI10",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC2_AI10",
        "payload": "{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":105,\"quantity\":1}",
        "payloadType": "json",
        "x": 130,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "1239ddb151764d3c",
        "type": "link out",
        "z": "237db71295252168",
        "name": "TC-RE-05",
        "mode": "link",
        "links": [
            "c64e80cac0381523"
        ],
        "x": 1695,
        "y": 680,
        "wires": []
    },
    {
        "id": "6d34fe1cdc2e37e7",
        "type": "function",
        "z": "237db71295252168",
        "name": "calc_vol_FA-01",
        "func": "// Extraer el valor del objeto msg.payload.data[0]\nconst valorCrudo = msg.payload.data[0];\n\n// Verificar si es un número válido\nif (valorCrudo === undefined || isNaN(valorCrudo)) {\n    node.warn(\"Valor no numérico o indefinido: \" + valorCrudo);\n    msg.payload = \"Error: Valor no válido\";\n    msg.nombre = \"Volumen FA-01\";\n    msg.unidades = \"Litros\";\n    return msg;\n}\n\n// Calcular el volumen\nconst valorLitros = ((valorCrudo - 20000) / (4000 - 20000)) * (113307 - 0);\nmsg.payload = Math.round(valorLitros);\nmsg.nombre = \"Volumen FA-01\";\nmsg.unidades = \"Litros\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 640,
        "wires": [
            [
                "1239ddb151764d3c",
                "6e1b6f7235f8f97a"
            ]
        ]
    },
    {
        "id": "548bb0a751518483",
        "type": "function",
        "z": "237db71295252168",
        "name": "calc_vol_FA-2B",
        "func": "const valorCrudo = msg.payload;\nconst valorLitros = ((valorCrudo - 4000) / (20000 - 4000)) * (20000 - 0);\nmsg.payload = Math.round(valorLitros);\nmsg.nombre = \"Volumen FA-2A\";\nmsg.unidades = \"Litros\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "7dbd72f118d1fb17",
        "type": "function",
        "z": "237db71295252168",
        "name": "calc_vol_FA-09",
        "func": "// Determinar el valor crudo basado en la estructura de datos\nlet valorCrudo;\nif (Array.isArray(msg.payload) && msg.payload.length > 0) {\n    valorCrudo = msg.payload[0];\n} else if (typeof msg.payload === 'object' && msg.payload !== null && msg.payload.data) {\n    valorCrudo = Array.isArray(msg.payload.data) ? msg.payload.data[0] : msg.payload.data;\n} else {\n    valorCrudo = msg.payload;\n}\n\n// Asegurar que valorCrudo sea un número\nvalorCrudo = Number(valorCrudo);\nif (isNaN(valorCrudo)) {\n    valorCrudo = 0;\n    node.warn(\"Valor no numérico detectado: \" + JSON.stringify(msg.payload));\n}\n\n// Cálculo del volumen\nconst valorLitros = ((valorCrudo - 4000) / (20000 - 4000)) * (19000 - 0);\nmsg.payload = Math.round(valorLitros);\nmsg.nombre = \"Volumen FA-09\";\nmsg.unidades = \"Litros\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 680,
        "wires": [
            [
                "1239ddb151764d3c"
            ]
        ]
    },
    {
        "id": "6e1b6f7235f8f97a",
        "type": "debug",
        "z": "237db71295252168",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1550,
        "y": 580,
        "wires": []
    },
    {
        "id": "43cec8ccf957d186",
        "type": "debug",
        "z": "237db71295252168",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 540,
        "wires": []
    },
    {
        "id": "5e9f45f078d99766",
        "type": "inject",
        "z": "1eb03b4f8f90f9d8",
        "name": "ADC4_AI0",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC4_AI0",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":1,\"address\":40,\"quantity\":1}",
        "payloadType": "json",
        "x": 130,
        "y": 340,
        "wires": [
            [
                "34559fc6ca703fdf"
            ]
        ]
    },
    {
        "id": "6dde5d1b49c7ec18",
        "type": "inject",
        "z": "1eb03b4f8f90f9d8",
        "name": "update",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 300,
        "wires": [
            [
                "34559fc6ca703fdf"
            ]
        ]
    },
    {
        "id": "971cf082dd612e49",
        "type": "inject",
        "z": "1eb03b4f8f90f9d8",
        "name": "next",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "next",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 260,
        "wires": [
            [
                "34559fc6ca703fdf"
            ]
        ]
    },
    {
        "id": "3f151a39d8885868",
        "type": "change",
        "z": "1eb03b4f8f90f9d8",
        "name": "Advance queue",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "next",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 380,
        "wires": [
            [
                "34559fc6ca703fdf"
            ]
        ]
    },
    {
        "id": "34559fc6ca703fdf",
        "type": "function",
        "z": "1eb03b4f8f90f9d8",
        "name": "Modbus Queue",
        "func": "let resendifnoresposne = true; // resend the last message is no response is received\nlet resendinterval = 10; // resend last e message every x seconds\nlet online_threshold = 10; // Seconds between updates under which the device is considered online\nlet offline_threshold = 300; // Seconds between updates above which the device is considered offline\n\nlet notifmsg = null;\n\n// Check and make sure the incoming message has a topic\nif ((msg.topic===\"\")||(msg.topic===null)||(msg.topic===undefined)) {\n    node.status({fill:\"red\",shape:\"dot\",text:\"Topic missing\"});\n    return;\n}\n\nlet lastupdate = context.get(\"lastupdate\");\nlet state = context.get(\"state\") | 0;\nlet queue = context.get(\"queue\");\nlet queuecount = 0;\nif (queue === undefined) {\n    queue = [];\n} else {\n    if (Array.isArray(queue)) {\n        queuecount = queue.length;\n    } else {\n        queue = [];\n    }\n}\nlet current = new Date().getTime();\nlet send = false;\n\nswitch (msg.topic.toLowerCase()) {\n    case \"update\":\n        // Update the timer and statistics\n\n        if (lastupdate !== undefined) {\n            notifmsg = { \"topic\": \"Information\", \"payload\": {} };\n            current = current - lastupdate;\n            current = Math.floor(current / 1000);\n            notifmsg.payload.secondsincelastupdate = current;\n            var minute = Math.floor(current / 60);\n            var hour = Math.floor(minute / 60);\n            var day = Math.floor(hour / 24);\n            if (current > 24 * 60 * 60) {\n                notifmsg.payload.updatetext = \"Last update \" + day + \" days, \" + hour % 24 + \" hours, \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else if (current > 60 * 60) {\n                notifmsg.payload.updatetext = \"Last update \" + hour % 24 + \" hours, \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else if (current > 60) {\n                notifmsg.payload.updatetext = \"Last update \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else {\n                notifmsg.payload.updatetext = \"Last update \" + current % 60 + \" seconds ago\";\n            }\n\n            // Resend last message if there is no response from the server\n            if (resendifnoresposne) {\n                if ((current>0) && (current % resendinterval===0)) {\n                    let lastmsg = context.get(\"lastmsg\");\n                    if ((lastmsg!==undefined) && (context.get(\"sent\"))) {\n                        notifmsg.payload.resend = true;\n                        if ((lastmsg.payload.fc === 1) || (lastmsg.payload.fc === 2) || (lastmsg.payload.fc === 3) || (lastmsg.payload.fc === 4)) {\n                            // this is a modbus read request\n                            node.status({ fill: \"green\", shape: \"dot\", text: \"Read re-sent!\" });\n                            return [lastmsg, null, notifmsg];\n                        } else {\n                            // this is a modbus write request\n                            node.status({ fill: \"green\", shape: \"dot\", text: \"Write re-sent!\" });\n                            return [null, lastmsg, notifmsg];\n                        }\n                    }\n                }\n            }\n\n            // Check for online state\n            if (state !== 1) {\n                if (current < online_threshold) {\n                    notifmsg.topic = \"Warning\";\n                    notifmsg.payload.text = \"Device is now online\";\n                    notifmsg.payload.statuschange = true;\n                    state = 1;\n                    context.set(\"state\", state);\n                }\n            } else {\n                if (current > offline_threshold) {\n                    notifmsg.topic = \"Error\";\n                    notifmsg.payload.text = \"Device is not transmitting\";\n                    notifmsg.payload.statuschange = true;\n                    state = 99;\n                    context.set(\"state\", state);\n                }\n            }\n            notifmsg.payload.state = state;\n            if (state===1) {\n                node.status({ fill: \"blue\", shape: \"ring\", text: queuecount+ \" | \"+notifmsg.payload.updatetext });\n            } else {\n                node.status({ fill: \"red\", shape: \"ring\", text: queuecount + \" | \" + notifmsg.payload.updatetext });\n            }\n            return [null, null, notifmsg];\n\n        } else {\n            node.status({ fill: \"grey\", shape: \"ring\", text: \"No data\" });\n        }\n        break;\n    case \"next\":\n        // Update the lastupdate counter\n        context.set(\"lastupdate\", current);\n        context.set(\"sent\", false);\n        send = true;\n        break;\n    case \"reset\":\n        context.set(\"queue\",[]);\n        context.set(\"sent\", false);\n        context.set(\"lastmsg\", undefined);\n        break;\n    default:\n        // The incoming message is a modbus request\n\n        // delete the last msg to prevent from being resent\n        // context.set(\"lastmsg\", undefined);\n\n        // Check if there is already a message in the queue with the same topic. \n        // If there is it needs to be deleted, because we only keep the last message.\n        for (let i=queue.length-1; i>=0; i--) {\n            if (queue[i].topic === msg.topic) {\n                queue.splice(i,1);\n            }\n        }\n\n        // Add the message to the end of the queue\n        queue.push(msg);\n        context.set(\"queue\",queue);\n\n        if (!context.get(\"sent\")) {\n            send = true;\n        }\n        node.status({ fill: \"green\", shape: \"dot\", text: queue.length });\n\n}\n\n// We need to send out a new message\nif (send) {\n\n    if (queue.length>0) {\n        // Get the older message from the array\n        let newmsg = queue[0];\n        // remove this message\n        queue.splice(0,1);\n        context.set(\"queue\",queue);\n        context.set(\"sent\", true);\n        context.set(\"lastmsg\", newmsg);\n\n        if ((newmsg.payload.fc === 1) || (newmsg.payload.fc === 2) || (newmsg.payload.fc === 3) || (newmsg.payload.fc === 4)) {\n            // this is a modbus read request\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Read sent!\" });\n            return[newmsg,null,null];\n        } else {\n            // this is a modbus write request\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Write sent!\" });\n            return [null, newmsg, null];\n        }\n        \n    }\n}\n",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 420,
        "wires": [
            [
                "569f0bcbe0758d28"
            ],
            [],
            [
                "1b2fed0d52aef557"
            ]
        ],
        "info": "# Modbus Queue\r\n\r\nThis node queueing read and write messages for modbus. Use this node if you are reading and writing the same device with many different requests. E.g. reading different coil/register intervals continously and also writing to the device at the same time.\r\n\r\nIt does a few things:\r\n- queues all messages arrive on the input port\r\n- based on the msg.topic, older messages of the same topci is ignored\r\n- sends out the oldest message and waits for the \r\n- monitors the time since last message and send out report on the output\r\n- handles online/offline status\r\n- resend the last message is response is not received in time\r\n\r\n## Input Data\r\n\r\n### payload\r\n\r\nThe payload should contain the data that gets sent to the flex-getter or flex-write node.\r\nTypical modbus read payload:\r\n`{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":1000,\"quantity\":20}`\r\nTypical modbus write payload:\r\n`{\"value\":false,\"fc\":5,\"unitid\":1,\"address\":0,\"quantity\":1}`\r\n\r\n### topic\r\n\r\nEach message must contain a topic (any text), and this topic is used to identify the different read/write requests and delete any earlier request with the same topic if it still in the queueing\r\n\r\nThere are a few reserved topic for special function (for these payload is ignored):\r\n- reset: resets the queue and deleted any data collected so far\r\n- next: this is the message fed back from the flex getter/write node to indicate to this node that a new message can be sent out\r\n- update: this should be coming from a 1 second time to display the current queue count, time since the last update and online/offline status\r\n\r\n## Output ports\r\n\r\n### Port 1: flex getter\r\n\r\nThis output should be connected to a modbos-flex-getter and all the read requests will be sent out through this port\r\n\r\n### Port 2: flex write\r\n\r\nThis output should be connected to a modbos-flex-write and all the write requests will be sent out through this port\r\n\r\n### Port 3: status messages\r\n\r\nThis port outputs a status message for every update message (msg.topic=\"update\").\r\n\r\n- topic: \"Information\" for regular updates, \"Warning\": offline device is now back online, \"Error\": device is offline\r\n- payload.text: message like when the device gone offline, or back online\r\n- payload.updatetext: time passed since the last update (human readable format)\r\n- payload.secondsincelastupdate: number of seconds since the last update from the device\r\n- payload.statuschange: true if status is changed (gone offline, back online)\r\n- payload.state: 0: initial state, no data yet, 1: device online, 99: device offline\r\n\r\n## Node Settings\r\n\r\nChange the settings in the first 4 lines of the code to influence the behaviour. Explanation is in the code as comment."
    },
    {
        "id": "3136059b78dfd528",
        "type": "inject",
        "z": "1eb03b4f8f90f9d8",
        "name": "reset",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 220,
        "wires": [
            [
                "34559fc6ca703fdf"
            ]
        ]
    },
    {
        "id": "1b2fed0d52aef557",
        "type": "function",
        "z": "1eb03b4f8f90f9d8",
        "name": "update log",
        "func": "if (msg.topic === \"Information\") {\n    // Registrar mensajes de información\n    node.log(\"Información: \" + msg.payload.updatetext);\n} else if (msg.topic === \"Warning\") {\n    // Registrar mensajes de advertencia\n    node.warn(\"Advertencia: \" + msg.payload.text);\n} else if (msg.topic === \"Error\") {\n    // Registrar mensajes de error\n    node.error(\"Error: \" + msg.payload.text);\n}\n\n// Puedes agregar lógica adicional para procesar otros campos del mensaje de estado\n// Por ejemplo, puedes verificar el valor de msg.payload.state para realizar acciones específicas\n// según el estado del dispositivo (en línea, fuera de línea, etc.)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "f7ca5e06dd50c4af",
        "type": "inject",
        "z": "1eb03b4f8f90f9d8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 660,
        "wires": [
            [
                "34559fc6ca703fdf"
            ]
        ]
    },
    {
        "id": "e5dc0edaa9fc544d",
        "type": "inject",
        "z": "1eb03b4f8f90f9d8",
        "name": "ADC4_AI1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC4_AI1",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":1,\"address\":41,\"quantity\":1}",
        "payloadType": "json",
        "x": 130,
        "y": 380,
        "wires": [
            [
                "34559fc6ca703fdf"
            ]
        ]
    },
    {
        "id": "e309ac011555cd1c",
        "type": "inject",
        "z": "1eb03b4f8f90f9d8",
        "name": "ADC4_AI2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC4_AI2",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":1,\"address\":42,\"quantity\":1}",
        "payloadType": "json",
        "x": 130,
        "y": 420,
        "wires": [
            [
                "34559fc6ca703fdf"
            ]
        ]
    },
    {
        "id": "569f0bcbe0758d28",
        "type": "modbus-flex-getter",
        "z": "1eb03b4f8f90f9d8",
        "name": "ADC4",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "f828c3bdd94a1080",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 510,
        "y": 400,
        "wires": [
            [
                "c87fddc1c5401137",
                "3f151a39d8885868"
            ],
            []
        ]
    },
    {
        "id": "c87fddc1c5401137",
        "type": "switch",
        "z": "1eb03b4f8f90f9d8",
        "name": "ADC4 Registers",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "read_ADC4_AI0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC4_AI1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC4_AI2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC4_AI3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC4_AI4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC4_AI5",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC4_AI6",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC4_AI7",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 8,
        "x": 700,
        "y": 400,
        "wires": [
            [
                "b64b7ffe3203889c"
            ],
            [
                "cf56faf8d34882c8"
            ],
            [
                "57535c28529681a8"
            ],
            [],
            [],
            [],
            [],
            [
                "4be8d18542c9a04c"
            ]
        ]
    },
    {
        "id": "451229d743b785b3",
        "type": "inject",
        "z": "1eb03b4f8f90f9d8",
        "name": "ADC4_AI3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC4_AI3",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":1,\"address\":43,\"quantity\":1}",
        "payloadType": "json",
        "x": 130,
        "y": 460,
        "wires": [
            [
                "34559fc6ca703fdf"
            ]
        ]
    },
    {
        "id": "57535c28529681a8",
        "type": "function",
        "z": "1eb03b4f8f90f9d8",
        "name": "salidaAsfalto",
        "func": "// Para el nodo \"calc temp\" (57535c28529681a8) - Salida Asfalto\nlet temperature = msg.payload;\nmsg.payload = Math.round(temperature * 0.1); // Redondear y mantener como número\nmsg.nombre = \"Salida Asfalto\";\nmsg.unidades = \"°C\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 420,
        "wires": [
            [
                "c0231489540b4e4d"
            ]
        ]
    },
    {
        "id": "4be8d18542c9a04c",
        "type": "function",
        "z": "1eb03b4f8f90f9d8",
        "name": "salidaHCD",
        "func": "// Para el nodo \"calc temp\" (4be8d18542c9a04c) - Salida HCD\nlet temperature = msg.payload;\nmsg.payload = Math.round(temperature * 0.1); // Redondear y mantener como número\nmsg.nombre = \"Salida HCD\";\nmsg.unidades = \"°C\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 460,
        "wires": [
            [
                "c0231489540b4e4d"
            ]
        ]
    },
    {
        "id": "b64b7ffe3203889c",
        "type": "function",
        "z": "1eb03b4f8f90f9d8",
        "d": true,
        "name": "entradaResiduo",
        "func": "// Para el nodo \"calc temp\" (b64b7ffe3203889c) - Entrada Residuo\nlet temperature = msg.payload;\nmsg.payload = Math.round(temperature * 0.1); // Redondear y mantener como número\nmsg.nombre = \"Entrada Residuo\";\nmsg.unidades = \"°C\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 340,
        "wires": [
            [
                "c0231489540b4e4d"
            ]
        ]
    },
    {
        "id": "cf56faf8d34882c8",
        "type": "function",
        "z": "1eb03b4f8f90f9d8",
        "d": true,
        "name": "salidaResiduo",
        "func": "// Para el nodo \"calc temp\" (cf56faf8d34882c8) - Salida Residuo\nlet temperature = msg.payload;\nmsg.payload = Math.round(temperature * 0.1); // Redondear y mantener como número\nmsg.nombre = \"Salida Residuo\";\nmsg.unidades = \"°C\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 380,
        "wires": [
            [
                "c0231489540b4e4d"
            ]
        ]
    },
    {
        "id": "81886a7594332d1d",
        "type": "inject",
        "z": "1eb03b4f8f90f9d8",
        "name": "ADC4_AI7",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC4_AI7",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":1,\"address\":47,\"quantity\":1}",
        "payloadType": "json",
        "x": 130,
        "y": 620,
        "wires": [
            [
                "34559fc6ca703fdf"
            ]
        ]
    },
    {
        "id": "0666e494f2c1b606",
        "type": "inject",
        "z": "1eb03b4f8f90f9d8",
        "name": "ADC4_AI5",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC4_AI5",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":1,\"address\":45,\"quantity\":1}",
        "payloadType": "json",
        "x": 130,
        "y": 540,
        "wires": [
            [
                "34559fc6ca703fdf"
            ]
        ]
    },
    {
        "id": "bf2cabf9d0cc5d38",
        "type": "inject",
        "z": "1eb03b4f8f90f9d8",
        "name": "ADC4_AI4",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC4_AI4",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":1,\"address\":44,\"quantity\":1}",
        "payloadType": "json",
        "x": 130,
        "y": 500,
        "wires": [
            [
                "34559fc6ca703fdf"
            ]
        ]
    },
    {
        "id": "e0402c118db6ba6e",
        "type": "inject",
        "z": "1eb03b4f8f90f9d8",
        "name": "ADC4_AI6",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC4_AI6",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":1,\"address\":46,\"quantity\":1}",
        "payloadType": "json",
        "x": 130,
        "y": 580,
        "wires": [
            [
                "34559fc6ca703fdf"
            ]
        ]
    },
    {
        "id": "c0231489540b4e4d",
        "type": "link out",
        "z": "1eb03b4f8f90f9d8",
        "name": "TC-RE-05",
        "mode": "link",
        "links": [
            "c64e80cac0381523"
        ],
        "x": 1045,
        "y": 400,
        "wires": []
    },
    {
        "id": "6c245f577a76ebfa",
        "type": "inject",
        "z": "a0c3bb5123a98cbc",
        "name": "ADC3_AI0",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC3_AI0",
        "payload": "{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":40,\"quantity\":1}",
        "payloadType": "json",
        "x": 220,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "43f4a7544b73a628",
        "type": "inject",
        "z": "a0c3bb5123a98cbc",
        "name": "update",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 380,
        "wires": [
            [
                "b8dfe16f6e8ba549"
            ]
        ]
    },
    {
        "id": "cc4a975821edc8a3",
        "type": "inject",
        "z": "a0c3bb5123a98cbc",
        "name": "next",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "next",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 340,
        "wires": [
            [
                "b8dfe16f6e8ba549"
            ]
        ]
    },
    {
        "id": "1ab18490d1c31303",
        "type": "change",
        "z": "a0c3bb5123a98cbc",
        "name": "Advance queue",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "next",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 440,
        "wires": [
            [
                "b8dfe16f6e8ba549"
            ]
        ]
    },
    {
        "id": "b8dfe16f6e8ba549",
        "type": "function",
        "z": "a0c3bb5123a98cbc",
        "name": "Modbus Queue",
        "func": "let resendifnoresposne = true; // resend the last message is no response is received\nlet resendinterval = 10; // resend last e message every x seconds\nlet online_threshold = 10; // Seconds between updates under which the device is considered online\nlet offline_threshold = 300; // Seconds between updates above which the device is considered offline\n\nlet notifmsg = null;\n\n// Check and make sure the incoming message has a topic\nif ((msg.topic===\"\")||(msg.topic===null)||(msg.topic===undefined)) {\n    node.status({fill:\"red\",shape:\"dot\",text:\"Topic missing\"});\n    return;\n}\n\nlet lastupdate = context.get(\"lastupdate\");\nlet state = context.get(\"state\") | 0;\nlet queue = context.get(\"queue\");\nlet queuecount = 0;\nif (queue === undefined) {\n    queue = [];\n} else {\n    if (Array.isArray(queue)) {\n        queuecount = queue.length;\n    } else {\n        queue = [];\n    }\n}\nlet current = new Date().getTime();\nlet send = false;\n\nswitch (msg.topic.toLowerCase()) {\n    case \"update\":\n        // Update the timer and statistics\n\n        if (lastupdate !== undefined) {\n            notifmsg = { \"topic\": \"Information\", \"payload\": {} };\n            current = current - lastupdate;\n            current = Math.floor(current / 1000);\n            notifmsg.payload.secondsincelastupdate = current;\n            var minute = Math.floor(current / 60);\n            var hour = Math.floor(minute / 60);\n            var day = Math.floor(hour / 24);\n            if (current > 24 * 60 * 60) {\n                notifmsg.payload.updatetext = \"Last update \" + day + \" days, \" + hour % 24 + \" hours, \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else if (current > 60 * 60) {\n                notifmsg.payload.updatetext = \"Last update \" + hour % 24 + \" hours, \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else if (current > 60) {\n                notifmsg.payload.updatetext = \"Last update \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else {\n                notifmsg.payload.updatetext = \"Last update \" + current % 60 + \" seconds ago\";\n            }\n\n            // Resend last message if there is no response from the server\n            if (resendifnoresposne) {\n                if ((current>0) && (current % resendinterval===0)) {\n                    let lastmsg = context.get(\"lastmsg\");\n                    if ((lastmsg!==undefined) && (context.get(\"sent\"))) {\n                        notifmsg.payload.resend = true;\n                        if ((lastmsg.payload.fc === 1) || (lastmsg.payload.fc === 2) || (lastmsg.payload.fc === 3) || (lastmsg.payload.fc === 4)) {\n                            // this is a modbus read request\n                            node.status({ fill: \"green\", shape: \"dot\", text: \"Read re-sent!\" });\n                            return [lastmsg, null, notifmsg];\n                        } else {\n                            // this is a modbus write request\n                            node.status({ fill: \"green\", shape: \"dot\", text: \"Write re-sent!\" });\n                            return [null, lastmsg, notifmsg];\n                        }\n                    }\n                }\n            }\n\n            // Check for online state\n            if (state !== 1) {\n                if (current < online_threshold) {\n                    notifmsg.topic = \"Warning\";\n                    notifmsg.payload.text = \"Device is now online\";\n                    notifmsg.payload.statuschange = true;\n                    state = 1;\n                    context.set(\"state\", state);\n                }\n            } else {\n                if (current > offline_threshold) {\n                    notifmsg.topic = \"Error\";\n                    notifmsg.payload.text = \"Device is not transmitting\";\n                    notifmsg.payload.statuschange = true;\n                    state = 99;\n                    context.set(\"state\", state);\n                }\n            }\n            notifmsg.payload.state = state;\n            if (state===1) {\n                node.status({ fill: \"blue\", shape: \"ring\", text: queuecount+ \" | \"+notifmsg.payload.updatetext });\n            } else {\n                node.status({ fill: \"red\", shape: \"ring\", text: queuecount + \" | \" + notifmsg.payload.updatetext });\n            }\n            return [null, null, notifmsg];\n\n        } else {\n            node.status({ fill: \"grey\", shape: \"ring\", text: \"No data\" });\n        }\n        break;\n    case \"next\":\n        // Update the lastupdate counter\n        context.set(\"lastupdate\", current);\n        context.set(\"sent\", false);\n        send = true;\n        break;\n    case \"reset\":\n        context.set(\"queue\",[]);\n        context.set(\"sent\", false);\n        context.set(\"lastmsg\", undefined);\n        break;\n    default:\n        // The incoming message is a modbus request\n\n        // delete the last msg to prevent from being resent\n        // context.set(\"lastmsg\", undefined);\n\n        // Check if there is already a message in the queue with the same topic. \n        // If there is it needs to be deleted, because we only keep the last message.\n        for (let i=queue.length-1; i>=0; i--) {\n            if (queue[i].topic === msg.topic) {\n                queue.splice(i,1);\n            }\n        }\n\n        // Add the message to the end of the queue\n        queue.push(msg);\n        context.set(\"queue\",queue);\n\n        if (!context.get(\"sent\")) {\n            send = true;\n        }\n        node.status({ fill: \"green\", shape: \"dot\", text: queue.length });\n\n}\n\n// We need to send out a new message\nif (send) {\n\n    if (queue.length>0) {\n        // Get the older message from the array\n        let newmsg = queue[0];\n        // remove this message\n        queue.splice(0,1);\n        context.set(\"queue\",queue);\n        context.set(\"sent\", true);\n        context.set(\"lastmsg\", newmsg);\n\n        if ((newmsg.payload.fc === 1) || (newmsg.payload.fc === 2) || (newmsg.payload.fc === 3) || (newmsg.payload.fc === 4)) {\n            // this is a modbus read request\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Read sent!\" });\n            return[newmsg,null,null];\n        } else {\n            // this is a modbus write request\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Write sent!\" });\n            return [null, newmsg, null];\n        }\n        \n    }\n}\n",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 580,
        "wires": [
            [
                "e93f7a99f08b5307"
            ],
            [],
            [
                "a23532b80e487bdc"
            ]
        ],
        "info": "# Modbus Queue\r\n\r\nThis node queueing read and write messages for modbus. Use this node if you are reading and writing the same device with many different requests. E.g. reading different coil/register intervals continously and also writing to the device at the same time.\r\n\r\nIt does a few things:\r\n- queues all messages arrive on the input port\r\n- based on the msg.topic, older messages of the same topci is ignored\r\n- sends out the oldest message and waits for the \r\n- monitors the time since last message and send out report on the output\r\n- handles online/offline status\r\n- resend the last message is response is not received in time\r\n\r\n## Input Data\r\n\r\n### payload\r\n\r\nThe payload should contain the data that gets sent to the flex-getter or flex-write node.\r\nTypical modbus read payload:\r\n`{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":1000,\"quantity\":20}`\r\nTypical modbus write payload:\r\n`{\"value\":false,\"fc\":5,\"unitid\":1,\"address\":0,\"quantity\":1}`\r\n\r\n### topic\r\n\r\nEach message must contain a topic (any text), and this topic is used to identify the different read/write requests and delete any earlier request with the same topic if it still in the queueing\r\n\r\nThere are a few reserved topic for special function (for these payload is ignored):\r\n- reset: resets the queue and deleted any data collected so far\r\n- next: this is the message fed back from the flex getter/write node to indicate to this node that a new message can be sent out\r\n- update: this should be coming from a 1 second time to display the current queue count, time since the last update and online/offline status\r\n\r\n## Output ports\r\n\r\n### Port 1: flex getter\r\n\r\nThis output should be connected to a modbos-flex-getter and all the read requests will be sent out through this port\r\n\r\n### Port 2: flex write\r\n\r\nThis output should be connected to a modbos-flex-write and all the write requests will be sent out through this port\r\n\r\n### Port 3: status messages\r\n\r\nThis port outputs a status message for every update message (msg.topic=\"update\").\r\n\r\n- topic: \"Information\" for regular updates, \"Warning\": offline device is now back online, \"Error\": device is offline\r\n- payload.text: message like when the device gone offline, or back online\r\n- payload.updatetext: time passed since the last update (human readable format)\r\n- payload.secondsincelastupdate: number of seconds since the last update from the device\r\n- payload.statuschange: true if status is changed (gone offline, back online)\r\n- payload.state: 0: initial state, no data yet, 1: device online, 99: device offline\r\n\r\n## Node Settings\r\n\r\nChange the settings in the first 4 lines of the code to influence the behaviour. Explanation is in the code as comment."
    },
    {
        "id": "5b5b5bcff327b3d2",
        "type": "inject",
        "z": "a0c3bb5123a98cbc",
        "name": "reset",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 300,
        "wires": [
            [
                "b8dfe16f6e8ba549"
            ]
        ]
    },
    {
        "id": "a23532b80e487bdc",
        "type": "function",
        "z": "a0c3bb5123a98cbc",
        "name": "update log",
        "func": "if (msg.topic === \"Information\") {\n    // Registrar mensajes de información\n    node.log(\"Información: \" + msg.payload.updatetext);\n} else if (msg.topic === \"Warning\") {\n    // Registrar mensajes de advertencia\n    node.warn(\"Advertencia: \" + msg.payload.text);\n} else if (msg.topic === \"Error\") {\n    // Registrar mensajes de error\n    node.error(\"Error: \" + msg.payload.text);\n}\n\n// Puedes agregar lógica adicional para procesar otros campos del mensaje de estado\n// Por ejemplo, puedes verificar el valor de msg.payload.state para realizar acciones específicas\n// según el estado del dispositivo (en línea, fuera de línea, etc.)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "04db21aaae62e457",
        "type": "inject",
        "z": "a0c3bb5123a98cbc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 740,
        "wires": [
            [
                "b8dfe16f6e8ba549"
            ]
        ]
    },
    {
        "id": "26afa9bd82404b08",
        "type": "inject",
        "z": "a0c3bb5123a98cbc",
        "name": "ADC_3_AI1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC3_AI1",
        "payload": "{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":41,\"quantity\":1}",
        "payloadType": "json",
        "x": 220,
        "y": 460,
        "wires": [
            [
                "b8dfe16f6e8ba549"
            ]
        ]
    },
    {
        "id": "1a1e8032726bae08",
        "type": "inject",
        "z": "a0c3bb5123a98cbc",
        "name": "ADC3_AI2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC3_AI2",
        "payload": "{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":42,\"quantity\":1}",
        "payloadType": "json",
        "x": 220,
        "y": 500,
        "wires": [
            [
                "b8dfe16f6e8ba549"
            ]
        ]
    },
    {
        "id": "e93f7a99f08b5307",
        "type": "modbus-flex-getter",
        "z": "a0c3bb5123a98cbc",
        "name": "ADC3",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "3ab988e0e462aed7",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 670,
        "y": 540,
        "wires": [
            [
                "1ab18490d1c31303",
                "3e7b64cc97c2f7f5"
            ],
            []
        ]
    },
    {
        "id": "a278a479202d2215",
        "type": "inject",
        "z": "a0c3bb5123a98cbc",
        "name": "ADC3_AI3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC3_AI3",
        "payload": "{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":43,\"quantity\":1}",
        "payloadType": "json",
        "x": 220,
        "y": 540,
        "wires": [
            [
                "b8dfe16f6e8ba549"
            ]
        ]
    },
    {
        "id": "cc4dfb83603fe77b",
        "type": "inject",
        "z": "a0c3bb5123a98cbc",
        "name": "ADC3_AI4",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC3_AI4",
        "payload": "{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":44,\"quantity\":1}",
        "payloadType": "json",
        "x": 220,
        "y": 580,
        "wires": [
            [
                "b8dfe16f6e8ba549"
            ]
        ]
    },
    {
        "id": "20b924f970635346",
        "type": "inject",
        "z": "a0c3bb5123a98cbc",
        "name": "ADC3_AI5",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC3_AI5",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":1,\"address\":45,\"quantity\":1}",
        "payloadType": "json",
        "x": 220,
        "y": 620,
        "wires": [
            [
                "b8dfe16f6e8ba549"
            ]
        ]
    },
    {
        "id": "ac48853320345c69",
        "type": "inject",
        "z": "a0c3bb5123a98cbc",
        "name": "ADC3_AI6",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC3_AI6",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":1,\"address\":46,\"quantity\":1}",
        "payloadType": "json",
        "x": 220,
        "y": 660,
        "wires": [
            [
                "b8dfe16f6e8ba549"
            ]
        ]
    },
    {
        "id": "4f24d892674dd220",
        "type": "inject",
        "z": "a0c3bb5123a98cbc",
        "name": "ADC3_AI7",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC3_AI7",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":1,\"address\":47,\"quantity\":1}",
        "payloadType": "json",
        "x": 210,
        "y": 700,
        "wires": [
            [
                "b8dfe16f6e8ba549"
            ]
        ]
    },
    {
        "id": "0cb330b4bb903e80",
        "type": "function",
        "z": "a0c3bb5123a98cbc",
        "name": "calc_vol_FA-06B",
        "func": "const valorCrudo = msg.payload[0];\nconst valorLitros = ((valorCrudo - 4000) / (4000 - 20000)) * (0 - 94100);\nmsg.payload = Math.round(valorLitros);  // Valor numérico calculado\nmsg.nombre = \"Volumen FA-06B\";  // Nombre del sensor\nmsg.unidades = \"Litros\";        // Unidades\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 580,
        "wires": [
            [
                "d52369388cd60329"
            ]
        ]
    },
    {
        "id": "772f5fdb7f804362",
        "type": "function",
        "z": "a0c3bb5123a98cbc",
        "name": "calc_vol_FA-04",
        "func": "const valorCrudo = msg.payload[0];\nconst valorLitros = ((valorCrudo - 4000) / (20000 - 4000)) * (65000 - 3200);\nmsg.payload = Math.round(valorLitros);  // Valor numérico calculado\nmsg.nombre = \"Volumen FA-04\";  // Nombre del sensor\nmsg.unidades = \"Litros\";       // Unidades\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 620,
        "wires": [
            [
                "d52369388cd60329"
            ]
        ]
    },
    {
        "id": "39b599f0bf5b27d4",
        "type": "function",
        "z": "a0c3bb5123a98cbc",
        "name": "calc_vol_FA-06A",
        "func": "const valorCrudo = msg.payload[0];\nconst valorLitros = ((valorCrudo - 3980) / (20000 - 3980)) * (66300 - 0);\nmsg.payload = Math.round(valorLitros);  // Valor numérico calculado\nmsg.nombre = \"Volumen FA-06A\";  // Nombre del sensor\nmsg.unidades = \"Litros\";        // Unidades\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 660,
        "wires": [
            [
                "d52369388cd60329"
            ]
        ]
    },
    {
        "id": "5a17e80f5c3f3b94",
        "type": "function",
        "z": "a0c3bb5123a98cbc",
        "name": "calc_vol_FA-06C",
        "func": "const valorCrudo = msg.payload[0];\nconst valorLitros = ((valorCrudo - 3990) / (20000 - 3990)) * (34755 - 0);\nmsg.payload = Math.round(valorLitros);  // Valor numérico calculado\nmsg.nombre = \"Volumen FA-06C\";  // Nombre del sensor\nmsg.unidades = \"Litros\";        // Unidades\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 700,
        "wires": [
            [
                "d52369388cd60329"
            ]
        ]
    },
    {
        "id": "3e7b64cc97c2f7f5",
        "type": "switch",
        "z": "a0c3bb5123a98cbc",
        "name": "ADC-TC-06 CANALES",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "read_ADC3_AI0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC3_AI1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC3_AI2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC3_AI3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC3_AI4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC3_AI5",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC3_AI6",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC3_AI7",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 8,
        "x": 980,
        "y": 660,
        "wires": [
            [],
            [
                "0cb330b4bb903e80"
            ],
            [],
            [
                "772f5fdb7f804362"
            ],
            [
                "39b599f0bf5b27d4"
            ],
            [
                "5a17e80f5c3f3b94"
            ],
            [],
            []
        ]
    },
    {
        "id": "d52369388cd60329",
        "type": "link out",
        "z": "a0c3bb5123a98cbc",
        "name": "TC-RE-05",
        "mode": "link",
        "links": [
            "c64e80cac0381523"
        ],
        "x": 1438.0069580078125,
        "y": 648.5694580078125,
        "wires": []
    },
    {
        "id": "c64e80cac0381523",
        "type": "link in",
        "z": "e2b9859944ef07b2",
        "name": "UI",
        "links": [
            "1239ddb151764d3c",
            "c0231489540b4e4d",
            "d52369388cd60329",
            "e72027eda7951399"
        ],
        "x": 625,
        "y": 380,
        "wires": [
            [
                "5b0d4a5032e573b2"
            ]
        ]
    },
    {
        "id": "5b0d4a5032e573b2",
        "type": "function",
        "z": "e2b9859944ef07b2",
        "name": "Formato para UI Tabla",
        "func": "// Verificar que hay información básica disponible\nif (!msg.nombre) {\n    msg.nombre = msg.topic || \"Sensor sin nombre\";\n}\n\nif (!msg.unidades) {\n    msg.unidades = \"\";\n}\n\n// Asegurar que hay un payload válido\nif (msg.payload === undefined || msg.payload === null) {\n    msg.payload = \"N/A\";\n}\n\n// Crear o recuperar objeto para la tabla (usar un objeto en lugar de array)\nlet sensoresMap = flow.get(\"sensoresMapData\") || {};\n\n// Asignar un identificador único para este sensor\nconst sensorId = msg.nombre;\n\n// Obtener estilo según categoría del sensor\nconst estilo = getEstilo(msg.nombre);\nconst orden = getOrden(msg.nombre);\n\n// Registrar el tiempo actual\nconst timestamp = Date.now();\n\n// Obtener el estilo para el tiempo según la categoría\nconst estiloTiempo = getEstiloTiempo(msg.nombre);\n\n// Formatear el valor con comas para los miles si es numérico\nlet valorFormateado = msg.payload;\nif (!isNaN(msg.payload) && typeof msg.payload !== 'boolean') {\n    // Verificar si el valor es un número\n    valorFormateado = formatearNumero(msg.payload);\n}\n\n// Actualizar los datos del sensor en el mapa\nsensoresMap[sensorId] = {\n    nombre: `<div style=\"${estilo.nombre}\">${msg.nombre}</div>`,\n    valor: `<div style=\"${estilo.valor}\">${valorFormateado}</div>`,\n    unidades: `<div style=\"${estilo.unidad}\">${msg.unidades}</div>`,\n    tiempo: `<div style=\"${estiloTiempo}\">hace 0 seg</div>`,\n    timestamp: timestamp,\n    ordenReal: orden\n};\n\n// Convertir el mapa a un array para la tabla, ordenando por la propiedad ordenReal\nlet tableData = Object.values(sensoresMap);\ntableData.sort((a, b) => a.ordenReal - b.ordenReal);\n\n// Guardar el mapa actualizado en el contexto\nflow.set(\"sensoresMapData\", sensoresMap);\n\n// Enviar datos a la tabla\nmsg.payload = tableData;\nreturn msg;\n\n// Función para formatear números con comas para los miles\nfunction formatearNumero(numero) {\n    return numero.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n\n// Función para asignar orden personalizado a cada sensor\nfunction getOrden(nombre) {\n    const ordenSensores = {\n        \"Volumen FA-02\": 1,\n        \"Flujo Materia Prima\": 2,\n        \"Salida Calentador\": 3,\n        \"Presión Alimentación\": 4,\n        \"Salida HCD\": 5,\n        \"Entrada Calentador\": 6,\n        \"Salida Asfalto\": 7,\n        \"Volumen FA-01\": 8,\n        \"Volumen FA-04\": 9,\n        \"Volumen FA-06A\": 10,\n        \"Volumen FA-06B\": 11,\n        \"Volumen FA-06C\": 12,\n        \"Volumen FA-09\": 13\n    };\n    \n    return ordenSensores[nombre] || 999; // Valor alto para sensores sin orden específico\n}\n\n// Función para generar estilos CSS según el nombre del sensor\nfunction getEstilo(nombre) {\n    // Definir categorías de sensores\n    const sensoresGigantes = [\"Volumen FA-02\", \"Flujo Materia Prima\", \"Salida Calentador\"];\n    const sensoresGrandes = [\"Presión Alimentación\", \"Salida HCD\"];\n    const sensoresMedianos = [\"Entrada Calentador\", \"Salida Asfalto\"];\n    \n    let estilo = {\n        nombre: \"text-align: left; padding: 8px;\",\n        valor: \"text-align: center; font-weight: bold; padding: 8px;\",\n        unidad: \"text-align: left; padding: 8px;\"\n    };\n    \n    // Aplicar estilos según la categoría del sensor\n    if (sensoresGigantes.includes(nombre)) {\n        estilo.nombre += \"font-size: 38px; font-weight: bold; color: #0000cc; background-color: #f0f4ff; padding: 16px 8px;\";\n        estilo.valor += \"font-size: 46px; color: #0000cc; background-color: #f0f4ff; padding: 16px 8px;\";\n        estilo.unidad += \"font-size: 38px; color: #0000cc; background-color: #f0f4ff; padding: 16px 8px;\";\n    } else if (sensoresGrandes.includes(nombre)) {\n        estilo.nombre += \"font-size: 30px; font-weight: bold; color: #000000; background-color: #f8f8f8; padding: 12px 8px;\";\n        estilo.valor += \"font-size: 30px; color: #000000; background-color: #f8f8f8; padding: 12px 8px;\";\n        estilo.unidad += \"font-size: 30px; color: #000000; background-color: #f8f8f8; padding: 12px 8px;\";\n    } else if (sensoresMedianos.includes(nombre)) {\n        estilo.nombre += \"font-size: 26px; font-weight: 500; color: #444444; padding: 10px 8px;\";\n        estilo.valor += \"font-size: 26px; color: #444444; padding: 10px 8px;\";\n        estilo.unidad += \"font-size: 26px; color: #444444; padding: 10px 8px;\";\n    } else {\n        estilo.nombre += \"font-size: 20px; color: #444444;\";\n        estilo.valor += \"font-size: 20px; color: #444444;\";\n        estilo.unidad += \"font-size: 20px; color: #444444;\";\n    }\n    \n    return estilo;\n}\n\n// Función para estilo de tiempo\nfunction getEstiloTiempo(nombre) {\n    // Definir categorías de sensores\n    const sensoresGigantes = [\"Volumen FA-02\", \"Flujo Materia Prima\", \"Salida Calentador\"];\n    const sensoresGrandes = [\"Presión Alimentación\", \"Salida HCD\"];\n    const sensoresMedianos = [\"Entrada Calentador\", \"Salida Asfalto\"];\n    \n    let estiloBase = \"text-align: right; color: #666666;\";\n    \n    // Estilos base según la importancia del sensor\n    if (sensoresGigantes.includes(nombre)) {\n        return estiloBase + \" font-size: 24px; padding: 16px 8px;\";\n    } else if (sensoresGrandes.includes(nombre)) {\n        return estiloBase + \" font-size: 20px; padding: 12px 8px;\";\n    } else if (sensoresMedianos.includes(nombre)) {\n        return estiloBase + \" font-size: 18px; padding: 10px 8px;\";\n    } else {\n        return estiloBase + \" font-size: 16px; padding: 8px;\";\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Inicializar el array de datos al cargar\nflow.set(\"sensorTableData\", []);",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 380,
        "wires": [
            [
                "195b07cec97cd884"
            ]
        ]
    },
    {
        "id": "ee326c85fcd249d3",
        "type": "function",
        "z": "e2b9859944ef07b2",
        "name": "Actualización de tiempos",
        "func": "// Este nodo debería ejecutarse cada segundo con un nodo inject\nlet sensoresMap = flow.get(\"sensoresMapData\") || {};\n\n// Actualizar los tiempos transcurridos para todos los sensores\nObject.keys(sensoresMap).forEach(key => {\n    const sensor = sensoresMap[key];\n    if (sensor.timestamp) {\n        const tiempoTranscurrido = Math.floor((Date.now() - sensor.timestamp) / 1000);\n        \n        // Determinar el estilo de tiempo basado en la categoría del sensor\n        const estiloTiempo = getEstiloTiempo(key);\n        \n        sensor.tiempo = `<div style=\"${estiloTiempo}\">hace ${tiempoTranscurrido} seg</div>`;\n    }\n});\n\n// Convertir el mapa a un array para la tabla, ordenando por la propiedad ordenReal\nlet tableData = Object.values(sensoresMap);\ntableData.sort((a, b) => a.ordenReal - b.ordenReal);\n\n// Guardar el mapa actualizado en el contexto\nflow.set(\"sensoresMapData\", sensoresMap);\n\n// Enviar datos a la tabla\nmsg.payload = tableData;\nreturn msg;\n\n// Función para determinar estilo del tiempo basado en la categoría\nfunction getEstiloTiempo(nombre) {\n    // Definir categorías de sensores\n    const sensoresGigantes = [\"Volumen FA-02\", \"Flujo Materia Prima\", \"Salida Calentador\"];\n    const sensoresGrandes = [\"Presión Alimentación\", \"Salida HCD\"];\n    const sensoresMedianos = [\"Entrada Calentador\", \"Salida Asfalto\"];\n    \n    let estiloBase = \"text-align: right; color: #666666;\";\n    \n    // Estilos base según la importancia del sensor\n    if (sensoresGigantes.includes(nombre)) {\n        return estiloBase + \" font-size: 24px; padding: 16px 8px;\";\n    } else if (sensoresGrandes.includes(nombre)) {\n        return estiloBase + \" font-size: 20px; padding: 12px 8px;\";\n    } else if (sensoresMedianos.includes(nombre)) {\n        return estiloBase + \" font-size: 18px; padding: 10px 8px;\";\n    } else {\n        return estiloBase + \" font-size: 16px; padding: 8px;\";\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 420,
        "wires": [
            [
                "195b07cec97cd884"
            ]
        ]
    },
    {
        "id": "a060ea74a19a072a",
        "type": "inject",
        "z": "e2b9859944ef07b2",
        "name": "Actualizar cada 1s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 540,
        "y": 420,
        "wires": [
            [
                "ee326c85fcd249d3"
            ]
        ]
    },
    {
        "id": "195b07cec97cd884",
        "type": "ui-table",
        "z": "e2b9859944ef07b2",
        "group": "3f690bb5a526a246",
        "name": "Tabla de Sensores",
        "label": "Valores de Sensores",
        "order": 6,
        "width": "12",
        "height": "5",
        "maxrows": "",
        "autocols": false,
        "showSearch": false,
        "selectionType": "none",
        "columns": [
            {
                "title": "Sensor",
                "key": "nombre",
                "type": "html",
                "width": "35%",
                "align": "start"
            },
            {
                "title": "Valor",
                "key": "valor",
                "type": "html",
                "width": "20%",
                "align": "center"
            },
            {
                "title": "Unidades",
                "key": "unidades",
                "type": "html",
                "width": "15%",
                "align": "start"
            },
            {
                "title": "Última actualización",
                "key": "tiempo",
                "type": "html",
                "width": "30%",
                "align": "end"
            }
        ],
        "mobileBreakpoint": "lg",
        "mobileBreakpointType": "defaults",
        "action": "append",
        "x": 1030,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "shutdown-button",
        "type": "ui-button",
        "z": "e2b9859944ef07b2",
        "d": true,
        "group": "3f690bb5a526a246",
        "name": "",
        "label": "Apagar Sistema",
        "order": 5,
        "width": 6,
        "height": 1,
        "emulateClick": false,
        "tooltip": "Apaga completamente el sistema",
        "color": "white",
        "bgcolor": "#c21717",
        "className": "",
        "icon": "fa-power-off",
        "iconPosition": "left",
        "payload": "shutdown",
        "payloadType": "str",
        "topic": "power",
        "topicType": "str",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "x": 390,
        "y": 520,
        "wires": [
            [
                "power-confirm"
            ]
        ]
    },
    {
        "id": "reboot-button",
        "type": "ui-button",
        "z": "e2b9859944ef07b2",
        "d": true,
        "group": "3f690bb5a526a246",
        "name": "",
        "label": "Reiniciar Sistema",
        "order": 2,
        "width": 6,
        "height": 1,
        "emulateClick": false,
        "tooltip": "Reinicia el sistema",
        "color": "white",
        "bgcolor": "#e67e22",
        "className": "",
        "icon": "fa-refresh",
        "iconPosition": "left",
        "payload": "reboot",
        "payloadType": "str",
        "topic": "power",
        "topicType": "str",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "x": 390,
        "y": 560,
        "wires": [
            [
                "power-confirm"
            ]
        ]
    },
    {
        "id": "power-confirm",
        "type": "ui-notification",
        "z": "e2b9859944ef07b2",
        "d": true,
        "ui": "bc1023506614f084",
        "position": "center",
        "colorDefault": false,
        "color": "#000000",
        "displayTime": "",
        "showCountdown": false,
        "outputs": 1,
        "allowDismiss": false,
        "dismissText": "",
        "allowConfirm": false,
        "confirmText": "",
        "raw": false,
        "className": "",
        "name": "Confirmación",
        "x": 700,
        "y": 540,
        "wires": [
            [
                "power-exec"
            ]
        ]
    },
    {
        "id": "power-exec",
        "type": "function",
        "z": "e2b9859944ef07b2",
        "d": true,
        "name": "Ejecutar comando",
        "func": "const exec = require('child_process').exec;\n\n// Verificar si el usuario confirmó la acción\nif (msg.payload === \"cancel\") {\n    return null; // No hacer nada si el usuario cancela\n}\n\n// Recuperar la acción original (shutdown o reboot) del topic\nconst accion = msg.topic;\n\n// Determinar el comando según el sistema operativo\nlet comando;\nconst plataforma = process.platform;\n\n// Definir el comando según el sistema operativo\nif (plataforma === \"win32\") { // Windows\n    if (accion === \"shutdown\") {\n        comando = 'shutdown /s /t 15'; // Apagar con 15 segundos de retraso\n    } else if (accion === \"reboot\") {\n        comando = 'shutdown /r /t 15'; // Reiniciar con 15 segundos de retraso\n    }\n} else if (plataforma === \"linux\" || plataforma === \"darwin\") { // Linux o macOS\n    if (accion === \"shutdown\") {\n        comando = 'sudo shutdown -h now'; // Apagar inmediatamente\n    } else if (accion === \"reboot\") {\n        comando = 'sudo reboot'; // Reiniciar inmediatamente\n    }\n}\n\n// Ejecutar el comando si se ha definido\nif (comando) {\n    // Mostrar mensaje de aviso\n    node.warn(`Ejecutando comando: ${comando}`);\n    \n    // Ejecutar el comando\n    exec(comando, (error, stdout, stderr) => {\n        if (error) {\n            node.error(`Error al ejecutar el comando: ${error}`);\n            return;\n        }\n    });\n    \n    // Informar al usuario\n    const accionTexto = accion === \"shutdown\" ? \"apagando\" : \"reiniciando\";\n    msg.payload = `Sistema ${accionTexto} en 15 segundos...`;\n    return msg;\n} else {\n    msg.payload = \"Comando no reconocido o sistema operativo no compatible\";\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "d8c7d0a4a545f9d8",
        "type": "function",
        "z": "e2b9859944ef07b2",
        "d": true,
        "name": "Establecer comando",
        "func": "// Lee la variable global os_platform (si no existe, asume 'linux')\nlet os = global.get(\"os_platform\") || \"linux\";\n\nif(msg.payload === \"shutdown\") {\n    if(os === \"win32\") {\n        msg.payload = \"shutdown /s /t 15\";\n    } else {\n        msg.payload = \"sudo shutdown -h now\";\n    }\n} else if(msg.payload === \"reboot\") {\n    if(os === \"win32\") {\n        msg.payload = \"shutdown /r /t 15\";\n    } else {\n        msg.payload = \"sudo reboot\";\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 760,
        "y": 880,
        "wires": [
            [
                "0c2e31a86f2d6a57"
            ]
        ]
    },
    {
        "id": "0c2e31a86f2d6a57",
        "type": "exec",
        "z": "e2b9859944ef07b2",
        "d": true,
        "command": "",
        "addpay": true,
        "append": "",
        "useSpawn": false,
        "timer": "",
        "oldrc": false,
        "name": "Ejecutar comando",
        "x": 970,
        "y": 880,
        "wires": [
            [
                "19529594499b6cb1"
            ],
            [],
            []
        ]
    },
    {
        "id": "77e41776ebafe468",
        "type": "ui-button",
        "z": "e2b9859944ef07b2",
        "d": true,
        "group": "3f690bb5a526a246",
        "name": "",
        "label": "Apagar Sistema",
        "order": 4,
        "width": 6,
        "height": 1,
        "emulateClick": false,
        "tooltip": "Apaga completamente el sistema",
        "color": "white",
        "bgcolor": "#c21717",
        "className": "",
        "icon": "fa-power-off",
        "iconPosition": "left",
        "payload": "shutdown",
        "payloadType": "str",
        "topic": "power",
        "topicType": "str",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "x": 340,
        "y": 860,
        "wires": [
            [
                "2c54dba10fddd5a1"
            ]
        ]
    },
    {
        "id": "29a120b8d5432f57",
        "type": "ui-button",
        "z": "e2b9859944ef07b2",
        "d": true,
        "group": "3f690bb5a526a246",
        "name": "",
        "label": "Reiniciar Sistema",
        "order": 3,
        "width": 6,
        "height": 1,
        "emulateClick": false,
        "tooltip": "Reinicia el sistema",
        "color": "white",
        "bgcolor": "#e67e22",
        "className": "",
        "icon": "fa-refresh",
        "iconPosition": "left",
        "payload": "reboot",
        "payloadType": "str",
        "topic": "power",
        "topicType": "str",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "x": 340,
        "y": 900,
        "wires": [
            [
                "2c54dba10fddd5a1"
            ]
        ]
    },
    {
        "id": "2c54dba10fddd5a1",
        "type": "ui-template",
        "z": "e2b9859944ef07b2",
        "d": true,
        "group": "3f690bb5a526a246",
        "page": "",
        "ui": "",
        "name": "Confirmacion",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <div>\n        <h3>¿Está seguro?</h3>\n        \n        <div v-if=\"msg.payload === 'shutdown'\">\n            <p>Está a punto de <strong>APAGAR</strong> el sistema.</p>\n            <p>Esta acción cerrará todos los procesos en ejecución.</p>\n        </div>\n        \n        <div v-if=\"msg.payload === 'reboot'\">\n            <p>Está a punto de <strong>REINICIAR</strong> el sistema.</p>\n            <p>Esta acción cerrará todos los procesos en ejecución y volverá a iniciar el sistema.</p>\n        </div>\n        \n        <div class=\"button-container\">\n            <v-btn @click=\"confirm()\" class=\"confirm-btn\">Confirmar</v-btn>\n            <v-btn @click=\"cancel()\" class=\"cancel-btn\">Cancelar</v-btn>\n        </div>\n    </div>\n</template>\n\n<script>\n    export default {\n        data() {\n            return {\n                action: ''\n            }\n        },\n        methods: {\n            confirm: function() {\n                // Enviar el mensaje original para continuar con la acción\n                this.send(msg);\n            },\n            cancel: function() {\n                // No hacer nada o enviar un mensaje de cancelación\n                this.send({payload: 'cancelled', topic: msg.topic});\n            }\n        },\n        mounted() {\n            // Guardar la acción solicitada cuando se carga el componente\n            this.action = msg.payload;\n        }\n    }\n</script>\n\n<style>\n    .button-container {\n        margin-top: 20px;\n        display: flex;\n        gap: 10px;\n    }\n    \n    .confirm-btn {\n        background-color: #c21717 !important;\n        color: white !important;\n    }\n    \n    .cancel-btn {\n        background-color: #888 !important;\n        color: white !important;\n    }\n    \n    h3 {\n        color: #333;\n        margin-bottom: 15px;\n    }\n    \n    p {\n        margin: 5px 0;\n    }\n    \n    strong {\n        color: #c21717;\n    }\n</style>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 570,
        "y": 880,
        "wires": [
            [
                "d8c7d0a4a545f9d8"
            ]
        ]
    },
    {
        "id": "19529594499b6cb1",
        "type": "ui-notification",
        "z": "e2b9859944ef07b2",
        "d": true,
        "ui": "bc1023506614f084",
        "position": "top right",
        "colorDefault": true,
        "color": "#000000",
        "displayTime": "3",
        "showCountdown": true,
        "outputs": 1,
        "allowDismiss": true,
        "dismissText": "Close",
        "allowConfirm": false,
        "confirmText": "Confirm",
        "raw": false,
        "className": "",
        "name": "Estado",
        "x": 1140,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "753b043fda615eac",
        "type": "ui-button",
        "z": "e2b9859944ef07b2",
        "group": "3f690bb5a526a246",
        "name": "",
        "label": "Apagar Sistema",
        "order": 4,
        "width": 6,
        "height": 1,
        "emulateClick": false,
        "tooltip": "Apaga completamente el sistema",
        "color": "white",
        "bgcolor": "#c21717",
        "className": "",
        "icon": "fa-power-off",
        "iconPosition": "left",
        "payload": "shutdown",
        "payloadType": "str",
        "topic": "power",
        "topicType": "str",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "x": 320,
        "y": 740,
        "wires": [
            [
                "b7da0d063a29e43d"
            ]
        ]
    },
    {
        "id": "4b25ad3d32583227",
        "type": "ui-button",
        "z": "e2b9859944ef07b2",
        "group": "3f690bb5a526a246",
        "name": "",
        "label": "Reiniciar Sistema",
        "order": 3,
        "width": 6,
        "height": 1,
        "emulateClick": false,
        "tooltip": "Reinicia el sistema",
        "color": "white",
        "bgcolor": "#e67e22",
        "className": "",
        "icon": "fa-refresh",
        "iconPosition": "left",
        "payload": "reboot",
        "payloadType": "str",
        "topic": "power",
        "topicType": "str",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "x": 320,
        "y": 780,
        "wires": [
            [
                "b7da0d063a29e43d"
            ]
        ]
    },
    {
        "id": "b7da0d063a29e43d",
        "type": "ui-notification",
        "z": "e2b9859944ef07b2",
        "ui": "bc1023506614f084",
        "position": "center",
        "colorDefault": false,
        "color": "#ffffff",
        "displayTime": "0",
        "showCountdown": false,
        "outputs": 2,
        "allowDismiss": true,
        "dismissText": "Cancelar",
        "allowConfirm": true,
        "confirmText": "Confirmar",
        "raw": true,
        "className": "",
        "name": "Confirmar Acción",
        "x": 540,
        "y": 760,
        "wires": [
            [
                "e03cb4fabe1d707d"
            ],
            []
        ]
    },
    {
        "id": "e03cb4fabe1d707d",
        "type": "function",
        "z": "e2b9859944ef07b2",
        "name": "Establecer comando",
        "func": "// Lee la variable global os_platform (si no existe, asume 'linux')\nlet os = global.get(\"os_platform\") || \"linux\";\n\nif(msg.payload === \"shutdown\") {\n    if(os === \"win32\") {\n        msg.payload = \"shutdown /s /t 15\";\n    } else {\n        msg.payload = \"sudo shutdown -h now\";\n    }\n} else if(msg.payload === \"reboot\") {\n    if(os === \"win32\") {\n        msg.payload = \"shutdown /r /t 15\";\n    } else {\n        msg.payload = \"sudo reboot\";\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 740,
        "y": 760,
        "wires": [
            [
                "9908b4b4c5bf5392"
            ]
        ]
    },
    {
        "id": "9908b4b4c5bf5392",
        "type": "exec",
        "z": "e2b9859944ef07b2",
        "command": "",
        "addpay": true,
        "append": "",
        "useSpawn": false,
        "timer": "",
        "oldrc": false,
        "name": "Ejecutar comando",
        "x": 950,
        "y": 760,
        "wires": [
            [
                "5372c5128017e926"
            ],
            [],
            []
        ]
    },
    {
        "id": "5372c5128017e926",
        "type": "ui-notification",
        "z": "e2b9859944ef07b2",
        "ui": "bc1023506614f084",
        "position": "top right",
        "colorDefault": true,
        "color": "#000000",
        "displayTime": "3",
        "showCountdown": true,
        "outputs": 1,
        "allowDismiss": true,
        "dismissText": "Close",
        "allowConfirm": false,
        "confirmText": "Confirm",
        "raw": false,
        "className": "",
        "name": "Estado",
        "x": 1120,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "c361d3e63601c79e",
        "type": "function",
        "z": "e2b9859944ef07b2",
        "name": "Generar mensaje de confirmación",
        "func": "// Determinar el mensaje según la acción\nlet title = '';\nlet text = '';\n\nif (msg.payload === 'shutdown') {\n    title = '¿Está seguro que desea apagar el sistema?';\n    text = 'Esta acción cerrará todos los procesos en ejecución.';\n} else if (msg.payload === 'reboot') {\n    title = '¿Está seguro que desea reiniciar el sistema?';\n    text = 'Esta acción cerrará todos los procesos en ejecución y reiniciará el sistema.';\n}\n\n// Configurar la notificación\nmsg.ui_notification = {\n    title: title,\n    text: text,\n    background: msg.payload === 'shutdown' ? '#c21717' : '#e67e22',\n    color: 'white',\n    closeButton: true\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 540,
        "y": 700,
        "wires": [
            [
                "b7da0d063a29e43d"
            ]
        ]
    }
]